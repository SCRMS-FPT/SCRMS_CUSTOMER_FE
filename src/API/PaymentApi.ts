//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { API_PAYMENT_URL } from "./config";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? API_PAYMENT_URL;
    }

    // Helper method to get authorization headers
    private getAuthHeaders(): HeadersInit {
        // Get token from localStorage (which is synced with Redux store)
        const token = localStorage.getItem("token");
        
        // Return headers with Authorization if token exists
        return token ? {
            "Authorization": `Bearer ${token}`,
            "Accept": "application/json"
        } : {
            "Accept": "application/json"
        };
    }

    /**
     * @param start_date (optional) 
     * @param end_date (optional) 
     * @return OK
     */
    getRevenueReport(start_date: string | undefined, end_date: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/admin/reports/revenue?";
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders() // Add auth headers
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRevenueReport(_response);
        });
    }

    protected processGetRevenueReport(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    processBookingPayment(body: ProcessPaymentRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/payments/wallet/booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(), // Add auth headers
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProcessBookingPayment(_response);
        });
    }

    protected processProcessBookingPayment(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getWalletBalance(): Promise<void> {
        let url_ = this.baseUrl + "/api/payments/wallet";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders() // Add auth headers
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWalletBalance(_response);
        });
    }

    protected processGetWalletBalance(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
    getTransactionHistory(page: number | undefined, limit: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/payments/wallet/transactions?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders() // Add auth headers
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTransactionHistory(_response);
        });
    }

    protected processGetTransactionHistory(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    depositFunds(body: DepositFundsRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/payments/wallet/deposit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(), // Add auth headers
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDepositFunds(_response);
        });
    }

    protected processDepositFunds(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 201) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class DepositFundsRequest implements IDepositFundsRequest {
    amount?: number;
    description?: string | undefined;

    constructor(data?: IDepositFundsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): DepositFundsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DepositFundsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["description"] = this.description;
        return data;
    }
}

export interface IDepositFundsRequest {
    amount?: number;
    description?: string | undefined;
}

export class ProcessPaymentRequest implements IProcessPaymentRequest {
    amount?: number;
    description?: string | undefined;
    paymentType?: string | undefined;
    referenceId?: string | undefined;
    packageType?: string | undefined;
    validUntil?: Date | undefined;
    coachId?: string | undefined;
    bookingId?: string | undefined;
    packageId?: string | undefined;

    constructor(data?: IProcessPaymentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.description = _data["description"];
            this.paymentType = _data["paymentType"];
            this.referenceId = _data["referenceId"];
            this.packageType = _data["packageType"];
            this.validUntil = _data["validUntil"] ? new Date(_data["validUntil"].toString()) : <any>undefined;
            this.coachId = _data["coachId"];
            this.bookingId = _data["bookingId"];
            this.packageId = _data["packageId"];
        }
    }

    static fromJS(data: any): ProcessPaymentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessPaymentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["description"] = this.description;
        data["paymentType"] = this.paymentType;
        data["referenceId"] = this.referenceId;
        data["packageType"] = this.packageType;
        data["validUntil"] = this.validUntil ? this.validUntil.toISOString() : <any>undefined;
        data["coachId"] = this.coachId;
        data["bookingId"] = this.bookingId;
        data["packageId"] = this.packageId;
        return data;
    }
}

export interface IProcessPaymentRequest {
    amount?: number;
    description?: string | undefined;
    paymentType?: string | undefined;
    referenceId?: string | undefined;
    packageType?: string | undefined;
    validUntil?: Date | undefined;
    coachId?: string | undefined;
    bookingId?: string | undefined;
    packageId?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}