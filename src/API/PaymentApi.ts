//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { API_PAYMENT_URL } from "./config";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? API_PAYMENT_URL;
    }

    // Helper method to get authorization headers
    private getAuthHeaders(): HeadersInit {
        // Get token from localStorage (which is synced with Redux store)
        const token = localStorage.getItem("token");
        
        // Return headers with Authorization if token exists
        return token ? {
            "Authorization": `Bearer ${token}`,
            "Accept": "application/json"
        } : {
            "Accept": "application/json"
        };
    }

    /**
     * @param start_date (optional) 
     * @param end_date (optional) 
     * @return OK
     */
    getRevenueReport(start_date: string | undefined, end_date: string | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/admin/reports/revenue?";
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders() // Add auth headers
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetRevenueReport(_response);
        });
    }

    protected processGetRevenueReport(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    processBookingPayment(body: ProcessPaymentRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/payments/wallet/booking";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(), // Add auth headers
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProcessBookingPayment(_response);
        });
    }

    protected processProcessBookingPayment(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 201) {
            return response.json();
        } else if (status !== 200 && status !== 201 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }


    /**
     * @return OK
     */
    getWalletBalance(): Promise<void> {
        let url_ = this.baseUrl + "/api/payments/wallet";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders() // Add auth headers
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetWalletBalance(_response);
        });
    }

    protected processGetWalletBalance(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
/**
     * @param start_date (optional) 
     * @param end_date (optional) 
     * @param select_by (optional) 
     * @return OK
     */
getCoachRevenueReport(start_date: string | undefined, end_date: string | undefined, select_by: string | undefined): Promise<CoachRevenueReportDto> {
    let url_ = this.baseUrl + "/api/coach/reports/revenue?";
    if (start_date === null)
        throw new Error("The parameter 'start_date' cannot be null.");
    else if (start_date !== undefined)
        url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
    if (end_date === null)
        throw new Error("The parameter 'end_date' cannot be null.");
    else if (end_date !== undefined)
        url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
    if (select_by === null)
        throw new Error("The parameter 'select_by' cannot be null.");
    else if (select_by !== undefined)
        url_ += "select_by=" + encodeURIComponent("" + select_by) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: {
            ...this.getAuthHeaders(), // Add auth headers
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetCoachRevenueReport(_response);
    });
}

protected processGetCoachRevenueReport(response: Response): Promise<CoachRevenueReportDto> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CoachRevenueReportDto.fromJS(resultData200);
        return result200;
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<CoachRevenueReportDto>(null as any);
}

/**
 * @param start_date (optional) 
 * @param end_date (optional) 
 * @param select_by (optional) 
 * @return OK
 */
getCourtRevenueReport(start_date: string | undefined, end_date: string | undefined, select_by: string | undefined): Promise<CourtRevenueReportDto> {
    let url_ = this.baseUrl + "/api/court/reports/revenue?";
    if (start_date === null)
        throw new Error("The parameter 'start_date' cannot be null.");
    else if (start_date !== undefined)
        url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
    if (end_date === null)
        throw new Error("The parameter 'end_date' cannot be null.");
    else if (end_date !== undefined)
        url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
    if (select_by === null)
        throw new Error("The parameter 'select_by' cannot be null.");
    else if (select_by !== undefined)
        url_ += "select_by=" + encodeURIComponent("" + select_by) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: {
                ...this.getAuthHeaders(), // Add auth headers
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetCourtRevenueReport(_response);
    });
}

protected processGetCourtRevenueReport(response: Response): Promise<CourtRevenueReportDto> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CourtRevenueReportDto.fromJS(resultData200);
        return result200;
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<CourtRevenueReportDto>(null as any);
}

    /**
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
    getPendingWithdrawalRequests(page: number | undefined, limit: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/admin/payments/withdrawal-requests?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders()
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPendingWithdrawalRequests(_response);
        });
    }

    protected processGetPendingWithdrawalRequests(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getUserWithdrawalRequests(): Promise<void> {
        let url_ = this.baseUrl + "/api/payments/wallet/withdrawals";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders()
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserWithdrawalRequests(_response);
        });
    }

    protected processGetUserWithdrawalRequests(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    adminDeleteReview(reviewId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/admin/reviews/{reviewId}";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined.");
        url_ = url_.replace("{reviewId}", encodeURIComponent("" + reviewId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: this.getAuthHeaders() // Add auth headers
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processAdminDeleteReview(_response);
        });
    }

    protected processAdminDeleteReview(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

 /**
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
 getFlaggedReviews(page: number | undefined, limit: number | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/admin/reviews/flagged?";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (limit === null)
        throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined)
        url_ += "limit=" + encodeURIComponent("" + limit) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: this.getAuthHeaders()
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetFlaggedReviews(_response);
    });
}

protected processGetFlaggedReviews(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.json();
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<void>(null as any);
}


 /**
     * @return OK
     */
 getUserWalletBalance(userId: string): Promise<void> {
    let url_ = this.baseUrl + "/api/admin/payments/wallet/{userId}";
    if (userId === undefined || userId === null)
        throw new Error("The parameter 'userId' must be defined.");
    url_ = url_.replace("{userId}", encodeURIComponent("" + userId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: this.getAuthHeaders()
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetUserWalletBalance(_response);
    });
}

protected processGetUserWalletBalance(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.json();
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<void>(null as any);
}


    /**
     * @return OK
     */
    processWithdrawalRequest(requestId: string, body: ProcessWithdrawalRequestDto): Promise<void> {
        let url_ = this.baseUrl + "/api/admin/payments/withdrawal-requests/{requestId}";
        if (requestId === undefined || requestId === null)
            throw new Error("The parameter 'requestId' must be defined.");
        url_ = url_.replace("{requestId}", encodeURIComponent("" + requestId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(), // Add auth headers
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processProcessWithdrawalRequest(_response);
        });
    }

    protected processProcessWithdrawalRequest(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }


        /**
     * @return OK
     */
        createWithdrawalRequest(body: WithdrawalRequestDto): Promise<void> {
            let url_ = this.baseUrl + "/api/payments/wallet/withdraw";
            url_ = url_.replace(/[?&]$/, "");
    
            const content_ = JSON.stringify(body);
    
            let options_: RequestInit = {
                body: content_,
                method: "POST",
                headers: {
                    ...this.getAuthHeaders(),
                    "Content-Type": "application/json",
                }
            };
    
            return this.http.fetch(url_, options_).then((_response: Response) => {
                return this.processCreateWithdrawalRequest(_response);
            });
        }
    
        protected processCreateWithdrawalRequest(response: Response): Promise<void> {
            const status = response.status;
            let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
            if (status === 200) {
                return response.text().then((_responseText) => {
                return;
                });
            } else if (status !== 200 && status !== 204) {
                return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
                });
            }
            return Promise.resolve<void>(null as any);
        }

    /**
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
    getTransactionHistory(page: number | undefined, limit: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/payments/wallet/transactions?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders() // Add auth headers
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTransactionHistory(_response);
        });
    }

    protected processGetTransactionHistory(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    depositFunds(body: DepositFundsRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/payments/wallet/deposit";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(), // Add auth headers
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDepositFunds(_response);
        });
    }

    protected processDepositFunds(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 201) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class DepositFundsRequest implements IDepositFundsRequest {
    amount?: number;
    description?: string | undefined;

    constructor(data?: IDepositFundsRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): DepositFundsRequest {
        data = typeof data === 'object' ? data : {};
        let result = new DepositFundsRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["description"] = this.description;
        return data;
    }
}

export interface IDepositFundsRequest {
    amount?: number;
    description?: string | undefined;
}

export class WithdrawalRequestDto implements IWithdrawalRequestDto {
    amount!: number;
    bankName!: string;
    accountNumber!: string;
    accountHolderName!: string;

    constructor(data?: IWithdrawalRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.bankName = _data["bankName"];
            this.accountNumber = _data["accountNumber"];
            this.accountHolderName = _data["accountHolderName"];
        }
    }

    static fromJS(data: any): WithdrawalRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new WithdrawalRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["bankName"] = this.bankName;
        data["accountNumber"] = this.accountNumber;
        data["accountHolderName"] = this.accountHolderName;
        return data;
    }
}

export interface IWithdrawalRequestDto {
    amount: number;
    bankName: string;
    accountNumber: string;
    accountHolderName: string;
}
export class RevenueStatDto implements IRevenueStatDto {
    period?: string | undefined;
    revenue?: number;

    constructor(data?: IRevenueStatDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.period = _data["period"];
            this.revenue = _data["revenue"];
        }
    }

    static fromJS(data: any): RevenueStatDto {
        data = typeof data === 'object' ? data : {};
        let result = new RevenueStatDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["period"] = this.period;
        data["revenue"] = this.revenue;
        return data;
    }
}

export interface IRevenueStatDto {
    period?: string | undefined;
    revenue?: number;
}

export class CoachRevenueReportDto implements ICoachRevenueReportDto {
    totalRevenue?: number;
    stats?: RevenueStatDto[] | undefined;
    dateRange?: DateRangeDto;

    constructor(data?: ICoachRevenueReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalRevenue = _data["totalRevenue"];
            if (Array.isArray(_data["stats"])) {
                this.stats = [] as any;
                for (let item of _data["stats"])
                    this.stats!.push(RevenueStatDto.fromJS(item));
            }
            this.dateRange = _data["dateRange"] ? DateRangeDto.fromJS(_data["dateRange"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CoachRevenueReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new CoachRevenueReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalRevenue"] = this.totalRevenue;
        if (Array.isArray(this.stats)) {
            data["stats"] = [];
            for (let item of this.stats)
                data["stats"].push(item.toJSON());
        }
        data["dateRange"] = this.dateRange ? this.dateRange.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICoachRevenueReportDto {
    totalRevenue?: number;
    stats?: RevenueStatDto[] | undefined;
    dateRange?: DateRangeDto;
}

export class CourtDateRangeDto implements ICourtDateRangeDto {
    startDate?: string | undefined;
    endDate?: string | undefined;

    constructor(data?: ICourtDateRangeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
        }
    }

    static fromJS(data: any): CourtDateRangeDto {
        data = typeof data === 'object' ? data : {};
        let result = new CourtDateRangeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        return data;
    }
}

export interface ICourtDateRangeDto {
    startDate?: string | undefined;
    endDate?: string | undefined;
}

export class CourtRevenueReportDto implements ICourtRevenueReportDto {
    totalRevenue?: number;
    stats?: CourtRevenueStatDto[] | undefined;
    dateRange?: CourtDateRangeDto;

    constructor(data?: ICourtRevenueReportDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalRevenue = _data["totalRevenue"];
            if (Array.isArray(_data["stats"])) {
                this.stats = [] as any;
                for (let item of _data["stats"])
                    this.stats!.push(CourtRevenueStatDto.fromJS(item));
            }
            this.dateRange = _data["dateRange"] ? CourtDateRangeDto.fromJS(_data["dateRange"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CourtRevenueReportDto {
        data = typeof data === 'object' ? data : {};
        let result = new CourtRevenueReportDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalRevenue"] = this.totalRevenue;
        if (Array.isArray(this.stats)) {
            data["stats"] = [];
            for (let item of this.stats)
                data["stats"].push(item.toJSON());
        }
        data["dateRange"] = this.dateRange ? this.dateRange.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICourtRevenueReportDto {
    totalRevenue?: number;
    stats?: CourtRevenueStatDto[] | undefined;
    dateRange?: CourtDateRangeDto;
}

export class CourtRevenueStatDto implements ICourtRevenueStatDto {
    period?: string | undefined;
    revenue?: number;

    constructor(data?: ICourtRevenueStatDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.period = _data["period"];
            this.revenue = _data["revenue"];
        }
    }

    static fromJS(data: any): CourtRevenueStatDto {
        data = typeof data === 'object' ? data : {};
        let result = new CourtRevenueStatDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["period"] = this.period;
        data["revenue"] = this.revenue;
        return data;
    }
}

export interface ICourtRevenueStatDto {
    period?: string | undefined;
    revenue?: number;
}
export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class DateRangeDto implements IDateRangeDto {
    startDate?: string | undefined;
    endDate?: string | undefined;

    constructor(data?: IDateRangeDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startDate = _data["startDate"];
            this.endDate = _data["endDate"];
        }
    }

    static fromJS(data: any): DateRangeDto {
        data = typeof data === 'object' ? data : {};
        let result = new DateRangeDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startDate"] = this.startDate;
        data["endDate"] = this.endDate;
        return data;
    }
}

export interface IDateRangeDto {
    startDate?: string | undefined;
    endDate?: string | undefined;
}


export class ProcessWithdrawalRequestDto implements IProcessWithdrawalRequestDto {
    status!: string;
    adminNote?: string | undefined;

    constructor(data?: IProcessWithdrawalRequestDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
            this.adminNote = _data["adminNote"];
        }
    }

    static fromJS(data: any): ProcessWithdrawalRequestDto {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessWithdrawalRequestDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        data["adminNote"] = this.adminNote;
        return data;
    }
}

export interface IProcessWithdrawalRequestDto {
    status: string;
    adminNote?: string | undefined;
}

export class ProcessPaymentRequest implements IProcessPaymentRequest {
    amount?: number;
    description?: string | undefined;
    paymentType?: string | undefined;
    referenceId?: string | undefined;
    coachId?: string | undefined;
    providerId?: string | undefined;
    bookingId?: string | undefined;
    packageId?: string | undefined;
    status?: string | undefined;

    constructor(data?: IProcessPaymentRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.amount = _data["amount"];
            this.description = _data["description"];
            this.paymentType = _data["paymentType"];
            this.referenceId = _data["referenceId"];
            this.coachId = _data["coachId"];
            this.providerId = _data["providerId"];
            this.bookingId = _data["bookingId"];
            this.packageId = _data["packageId"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ProcessPaymentRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ProcessPaymentRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["amount"] = this.amount;
        data["description"] = this.description;
        data["paymentType"] = this.paymentType;
        data["referenceId"] = this.referenceId;
        data["coachId"] = this.coachId;
        data["providerId"] = this.providerId;
        data["bookingId"] = this.bookingId;
        data["packageId"] = this.packageId;
        data["status"] = this.status;
        return data;
    }
}

export interface IProcessPaymentRequest {
    amount?: number;
    description?: string | undefined;
    paymentType?: string | undefined;
    referenceId?: string | undefined;
    coachId?: string | undefined;
    providerId?: string | undefined;
    bookingId?: string | undefined;
    packageId?: string | undefined;
    status?: string | undefined;
}


export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}