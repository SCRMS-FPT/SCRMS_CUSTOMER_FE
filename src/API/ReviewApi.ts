//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { API_REVIEW_URL } from "./config";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? API_REVIEW_URL;
    }
// Helper method to get authorization headers
private getAuthHeaders(): HeadersInit {
    // Get token from localStorage (which is synced with Redux store)
    const token = localStorage.getItem("token");
    
    // Return headers with Authorization if token exists
    return token ? {
        "Authorization": `Bearer ${token}`,
        "Accept": "application/json"
    } : {
        "Accept": "application/json"
    };
}

    /**
     * @return OK
     */
    updateReview(reviewId: string, body: UpdateReviewRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews/{reviewId}";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined.");
        url_ = url_.replace("{reviewId}", encodeURIComponent("" + reviewId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateReview(_response);
        });
    }

    protected processUpdateReview(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
 /**
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
 getFlaggedReviews(page: number | undefined, limit: number | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/admin/reviews/flagged?";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (limit === null)
        throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined)
        url_ += "limit=" + encodeURIComponent("" + limit) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: this.getAuthHeaders()
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetFlaggedReviews(_response);
    });
}

protected processGetFlaggedReviews(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        return;
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<void>(null as any);
}


    /**
     * @return OK
     */
    getReviewDetail(reviewId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews/{reviewId}";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined.");
        url_ = url_.replace("{reviewId}", encodeURIComponent("" + reviewId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders()
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReviewDetail(_response);
        });
    }

    protected processGetReviewDetail(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    deleteReview(reviewId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews/{reviewId}";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined.");
        url_ = url_.replace("{reviewId}", encodeURIComponent("" + reviewId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: this.getAuthHeaders()
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteReview(_response);
        });
    }

    protected processDeleteReview(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    replyToReview(reviewId: string, body: ReplyToReviewRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews/{reviewId}/reply";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined.");
        url_ = url_.replace("{reviewId}", encodeURIComponent("" + reviewId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processReplyToReview(_response);
        });
    }

    protected processReplyToReview(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.json();
        } else if (status !== 201 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
    getSelfReviewsByCoach(page: number | undefined, limit: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews-coach?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders()
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSelfReviewsByCoach(_response);
        });
    }

    protected processGetSelfReviewsByCoach(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
    getReviews(subjectType: string, subjectId: string, page: number | undefined, limit: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews?";
        if (subjectType === undefined || subjectType === null)
            throw new Error("The parameter 'subjectType' must be defined and cannot be null.");
        else
            url_ += "subjectType=" + encodeURIComponent("" + subjectType) + "&";
        if (subjectId === undefined || subjectId === null)
            throw new Error("The parameter 'subjectId' must be defined and cannot be null.");
        else
            url_ += "subjectId=" + encodeURIComponent("" + subjectId) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders()
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReviews(_response);
        });
    }

    protected processGetReviews(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    createReview(body: CreateReviewRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateReview(_response);
        });
    }

    protected processCreateReview(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 201 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
    getReviewsByCoachId(coachId: string, page: number | undefined, limit: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews/{coachId}?";
        if (coachId === undefined || coachId === null)
            throw new Error("The parameter 'coachId' must be defined.");
        url_ = url_.replace("{coachId}", encodeURIComponent("" + coachId));
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders()
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReviewsByCoachId(_response);
        });
    }

    protected processGetReviewsByCoachId(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
    getReviewReplies(reviewId: string, page: number | undefined, limit: number | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews/{reviewId}/replies?";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined.");
        url_ = url_.replace("{reviewId}", encodeURIComponent("" + reviewId));
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders()
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetReviewReplies(_response);
        });
    }

    protected processGetReviewReplies(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    flagReview(reviewId: string, body: FlagReviewRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/reviews/{reviewId}/flag";
        if (reviewId === undefined || reviewId === null)
            throw new Error("The parameter 'reviewId' must be defined.");
        url_ = url_.replace("{reviewId}", encodeURIComponent("" + reviewId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processFlagReview(_response);
        });
    }

    protected processFlagReview(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.json();
        } else if (status !== 201 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class CreateReviewRequest implements ICreateReviewRequest {
    subjectType?: string | undefined;
    subjectId?: string;
    rating?: number;
    comment?: string | undefined;

    constructor(data?: ICreateReviewRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.subjectType = _data["subjectType"];
            this.subjectId = _data["subjectId"];
            this.rating = _data["rating"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): CreateReviewRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateReviewRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["subjectType"] = this.subjectType;
        data["subjectId"] = this.subjectId;
        data["rating"] = this.rating;
        data["comment"] = this.comment;
        return data;
    }
}

export interface ICreateReviewRequest {
    subjectType?: string | undefined;
    subjectId?: string;
    rating?: number;
    comment?: string | undefined;
}

export class FlagReviewRequest implements IFlagReviewRequest {
    flagReason?: string | undefined;

    constructor(data?: IFlagReviewRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.flagReason = _data["flagReason"];
        }
    }

    static fromJS(data: any): FlagReviewRequest {
        data = typeof data === 'object' ? data : {};
        let result = new FlagReviewRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["flagReason"] = this.flagReason;
        return data;
    }
}

export interface IFlagReviewRequest {
    flagReason?: string | undefined;
}

export class ReplyToReviewRequest implements IReplyToReviewRequest {
    replyText?: string | undefined;

    constructor(data?: IReplyToReviewRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.replyText = _data["replyText"];
        }
    }

    static fromJS(data: any): ReplyToReviewRequest {
        data = typeof data === 'object' ? data : {};
        let result = new ReplyToReviewRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["replyText"] = this.replyText;
        return data;
    }
}

export interface IReplyToReviewRequest {
    replyText?: string | undefined;
}

export class UpdateReviewRequest implements IUpdateReviewRequest {
    rating?: number;
    comment?: string | undefined;

    constructor(data?: IUpdateReviewRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rating = _data["rating"];
            this.comment = _data["comment"];
        }
    }

    static fromJS(data: any): UpdateReviewRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateReviewRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rating"] = this.rating;
        data["comment"] = this.comment;
        return data;
    }
}

export interface IUpdateReviewRequest {
    rating?: number;
    comment?: string | undefined;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}