//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import { API_MATCHING_URL } from "./config";

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? API_MATCHING_URL;
    }
// Helper method to get authorization headers
private getAuthHeaders(): HeadersInit {
    // Get token from localStorage (which is synced with Redux store)
    const token = localStorage.getItem("token");
    
    // Return headers with Authorization if token exists
    return token ? {
        "Authorization": `Bearer ${token}`,
        "Accept": "application/json"
    } : {
        "Accept": "application/json"
    };
}

    /**
     * @return OK
     */
    swipe(body: SwipeRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/matches/swipe";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processSwipe(_response);
        });
    }

    protected processSwipe(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
/**
     * @param page (optional) 
     * @param limit (optional) 
     * @param filters (optional) 
     * @return OK
     */
suggestions(page: number | undefined, limit: number | undefined, filters: string | undefined): Promise<void> {
    let url_ = this.baseUrl + "/api/matches/suggestions?";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (limit === null)
        throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined)
        url_ += "limit=" + encodeURIComponent("" + limit) + "&";
    if (filters === null)
        throw new Error("The parameter 'filters' cannot be null.");
    else if (filters !== undefined)
        url_ += "filters=" + encodeURIComponent("" + filters) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: {
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processSuggestions(_response);
    });
}

protected processSuggestions(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.json();
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<void>(null as any);
}

/**
     * @return Created
     */
createUserSkill(body: CreateUserSkillRequest): Promise<void> {
    let url_ = this.baseUrl + "/api/matches/skills";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
        body: content_,
        method: "POST",
        headers: {
            "Content-Type": "application/json",
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processCreateUserSkill(_response);
    });
}

protected processCreateUserSkill(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 201) {
        return response.text().then((_responseText) => {
        return;
        });
    } else if (status === 400) {
        return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<void>(null as any);
}

    /**
     * @return OK
     */
    updateUserSkill(body: UpdateUserSkillRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/matches/skills";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateUserSkill(_response);
        });
    }

    protected processUpdateUserSkill(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getUserSkills(): Promise<void> {
        let url_ = this.baseUrl + "/api/matches/skills";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserSkills(_response);
        });
    }

    protected processGetUserSkills(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    respondToSwipe(body: RespondRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/matches/respond";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processRespondToSwipe(_response);
        });
    }

    protected processRespondToSwipe(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getPendingSwipes(): Promise<void> {
        let url_ = this.baseUrl + "/api/matches/get-pending-swipe";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPendingSwipes(_response);
        });
    }

    protected processGetPendingSwipes(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getMatches(page: number, limit: number): Promise<void> {
        let url_ = this.baseUrl + "/api/matches?";
        if (page === undefined || page === null)
            throw new Error("The parameter 'page' must be defined and cannot be null.");
        else
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === undefined || limit === null)
            throw new Error("The parameter 'limit' must be defined and cannot be null.");
        else
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMatches(_response);
        });
    }

    protected processGetMatches(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
}

export class RespondRequest implements IRespondRequest {
    swipeActionId?: string;
    decision?: string | undefined;

    constructor(data?: IRespondRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.swipeActionId = _data["swipeActionId"];
            this.decision = _data["decision"];
        }
    }

    static fromJS(data: any): RespondRequest {
        data = typeof data === 'object' ? data : {};
        let result = new RespondRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["swipeActionId"] = this.swipeActionId;
        data["decision"] = this.decision;
        return data;
    }
}

export interface IRespondRequest {
    swipeActionId?: string;
    decision?: string | undefined;
}

export class SwipeRequest implements ISwipeRequest {
    swipedUserId?: string;
    decision?: string | undefined;

    constructor(data?: ISwipeRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.swipedUserId = _data["swipedUserId"];
            this.decision = _data["decision"];
        }
    }

    static fromJS(data: any): SwipeRequest {
        data = typeof data === 'object' ? data : {};
        let result = new SwipeRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["swipedUserId"] = this.swipedUserId;
        data["decision"] = this.decision;
        return data;
    }
}

export interface ISwipeRequest {
    swipedUserId?: string;
    decision?: string | undefined;
}

export class UpdateUserSkillRequest implements IUpdateUserSkillRequest {
    sportId?: string;
    skillLevel?: string | undefined;

    constructor(data?: IUpdateUserSkillRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sportId = _data["sportId"];
            this.skillLevel = _data["skillLevel"];
        }
    }

    static fromJS(data: any): UpdateUserSkillRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateUserSkillRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sportId"] = this.sportId;
        data["skillLevel"] = this.skillLevel;
        return data;
    }
}

export interface IUpdateUserSkillRequest {
    sportId?: string;
    skillLevel?: string | undefined;
}

export class CreateUserSkillRequest implements ICreateUserSkillRequest {
    sportId?: string;
    skillLevel?: string | undefined;

    constructor(data?: ICreateUserSkillRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sportId = _data["sportId"];
            this.skillLevel = _data["skillLevel"];
        }
    }

    static fromJS(data: any): CreateUserSkillRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateUserSkillRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sportId"] = this.sportId;
        data["skillLevel"] = this.skillLevel;
        return data;
    }
}

export interface ICreateUserSkillRequest {
    sportId?: string;
    skillLevel?: string | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}