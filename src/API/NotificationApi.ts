//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.3.0.0 (NJsonSchema v11.2.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { API_GATEWAY_URL } from "./config";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
  private http: {
    fetch(url: RequestInfo, init?: RequestInit): Promise<Response>;
  };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    baseUrl?: string,
    http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }
  ) {
    this.http = http ? http : (window as any);
    this.baseUrl = baseUrl ?? API_GATEWAY_URL;
  }

  private getAuthHeaders(): HeadersInit {
    // Get token from localStorage (which is synced with Redux store)
    const token = localStorage.getItem("token");

    // Return headers with Authorization if token exists
    return token
      ? {
          Authorization: `Bearer ${token}`,
          Accept: "application/json",
        }
      : {
          Accept: "application/json",
        };
  }

  /**
   * Mark a notification as read
   * @return OK
   */
  readNotification(notificationId: string): Promise<void> {
    let url_ = this.baseUrl + "/notifications/{notificationId}/read";
    if (notificationId === undefined || notificationId === null)
      throw new Error("The parameter 'notificationId' must be defined.");
    url_ = url_.replace(
      "{notificationId}",
      encodeURIComponent("" + notificationId)
    );
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "PUT",
      headers: this.getAuthHeaders(),
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processReadNotification(_response);
    });
  }

  protected processReadNotification(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * Mark all notifications as read
   * @return OK
   */
  readAllNotifications(): Promise<void> {
    let url_ = this.baseUrl + "/notifications/read-all";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "PUT",
      headers: this.getAuthHeaders(),
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processReadAllNotifications(_response);
    });
  }

  protected processReadAllNotifications(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        return;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<void>(null as any);
  }

  /**
   * Get notifications
   * @param type (optional)
   * @param isRead (optional)
   * @param page (optional)
   * @param limit (optional)
   * @return OK
   */
  getNotifications(
    type: string | undefined,
    isRead: boolean | undefined,
    page: number | undefined,
    limit: number | undefined
  ): Promise<NotificationResponsePaginatedResult> {
    let url_ = this.baseUrl + "/notifications?";
    if (type !== undefined)
      url_ += "Type=" + encodeURIComponent("" + type) + "&";
    if (isRead !== undefined)
      url_ += "IsRead=" + encodeURIComponent("" + isRead) + "&";
    if (page === null) throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
      url_ += "Page=" + encodeURIComponent("" + page) + "&";
    if (limit === null)
      throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined)
      url_ += "Limit=" + encodeURIComponent("" + limit) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
      method: "GET",
      headers: {
        ...this.getAuthHeaders(),
      },
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
      return this.processGetNotifications(_response);
    });
  }

  protected processGetNotifications(
    response: Response
  ): Promise<NotificationResponsePaginatedResult> {
    const status = response.status;
    let _headers: any = {};
    if (response.headers && response.headers.forEach) {
      response.headers.forEach((v: any, k: any) => (_headers[k] = v));
    }
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = NotificationResponsePaginatedResult.fromJS(resultData200);
        return result200;
      });
    } else if (status === 400) {
      return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 =
          _responseText === ""
            ? null
            : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException(
          "Bad Request",
          status,
          _responseText,
          _headers,
          result400
        );
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException(
          "An unexpected server error occurred.",
          status,
          _responseText,
          _headers
        );
      });
    }
    return Promise.resolve<NotificationResponsePaginatedResult>(null as any);
  }
}

export class NotificationResponse implements INotificationResponse {
  id: string | undefined;
  isRead?: boolean;
  title?: string | undefined;
  content?: string | undefined;
  type?: string | undefined;
  createdAt?: Date;

  constructor(data?: INotificationResponse) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["id"];
      this.isRead = _data["isRead"];
      this.title = _data["title"];
      this.content = _data["content"];
      this.type = _data["type"];
      this.createdAt = _data["createdAt"]
        ? new Date(_data["createdAt"].toString())
        : <any>undefined;
    }
  }

  static fromJS(data: any): NotificationResponse {
    data = typeof data === "object" ? data : {};
    let result = new NotificationResponse();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["isRead"] = this.isRead;
    data["title"] = this.title;
    data["content"] = this.content;
    data["id"] = this.id;
    data["type"] = this.type;
    data["createdAt"] = this.createdAt
      ? this.createdAt.toISOString()
      : <any>undefined;
    return data;
  }
}

export interface INotificationResponse {
  isRead?: boolean;
  title?: string | undefined;
  content?: string | undefined;
  type?: string | undefined;
  createdAt?: Date;
}

export class NotificationResponsePaginatedResult
  implements INotificationResponsePaginatedResult
{
  pageIndex?: number;
  pageSize?: number;
  count?: number;
  data?: NotificationResponse[] | undefined;

  constructor(data?: INotificationResponsePaginatedResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.pageIndex = _data["pageIndex"];
      this.pageSize = _data["pageSize"];
      this.count = _data["count"];
      if (Array.isArray(_data["data"])) {
        this.data = [] as any;
        for (let item of _data["data"])
          this.data!.push(NotificationResponse.fromJS(item));
      }
    }
  }

  static fromJS(data: any): NotificationResponsePaginatedResult {
    data = typeof data === "object" ? data : {};
    let result = new NotificationResponsePaginatedResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["pageIndex"] = this.pageIndex;
    data["pageSize"] = this.pageSize;
    data["count"] = this.count;
    if (Array.isArray(this.data)) {
      data["data"] = [];
      for (let item of this.data) data["data"].push(item.toJSON());
    }
    return data;
  }
}

export interface INotificationResponsePaginatedResult {
  pageIndex?: number;
  pageSize?: number;
  count?: number;
  data?: NotificationResponse[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;

  constructor(data?: IProblemDetails) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      for (var property in _data) {
        if (_data.hasOwnProperty(property)) this[property] = _data[property];
      }
      this.type = _data["type"];
      this.title = _data["title"];
      this.status = _data["status"];
      this.detail = _data["detail"];
      this.instance = _data["instance"];
    }
  }

  static fromJS(data: any): ProblemDetails {
    data = typeof data === "object" ? data : {};
    let result = new ProblemDetails();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    for (var property in this) {
      if (this.hasOwnProperty(property)) data[property] = this[property];
    }
    data["type"] = this.type;
    data["title"] = this.title;
    data["status"] = this.status;
    data["detail"] = this.detail;
    data["instance"] = this.instance;
    return data;
  }
}

export interface IProblemDetails {
  type?: string | undefined;
  title?: string | undefined;
  status?: number | undefined;
  detail?: string | undefined;
  instance?: string | undefined;

  [key: string]: any;
}

export class SendEmailRequest implements ISendEmailRequest {
  to?: string | undefined;
  subject?: string | undefined;
  body?: string | undefined;
  isHtml?: boolean;

  constructor(data?: ISendEmailRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.to = _data["to"];
      this.subject = _data["subject"];
      this.body = _data["body"];
      this.isHtml = _data["isHtml"];
    }
  }

  static fromJS(data: any): SendEmailRequest {
    data = typeof data === "object" ? data : {};
    let result = new SendEmailRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["to"] = this.to;
    data["subject"] = this.subject;
    data["body"] = this.body;
    data["isHtml"] = this.isHtml;
    return data;
  }
}

export interface ISendEmailRequest {
  to?: string | undefined;
  subject?: string | undefined;
  body?: string | undefined;
  isHtml?: boolean;
}

export class SendNotificationRequest implements ISendNotificationRequest {
  sendTo?: string;
  title?: string | undefined;
  content?: string | undefined;
  type?: string | undefined;
  sendMail?: boolean;
  userEmail?: string | undefined;

  constructor(data?: ISendNotificationRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.sendTo = _data["sendTo"];
      this.title = _data["title"];
      this.content = _data["content"];
      this.type = _data["type"];
      this.sendMail = _data["sendMail"];
      this.userEmail = _data["userEmail"];
    }
  }

  static fromJS(data: any): SendNotificationRequest {
    data = typeof data === "object" ? data : {};
    let result = new SendNotificationRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === "object" ? data : {};
    data["sendTo"] = this.sendTo;
    data["title"] = this.title;
    data["content"] = this.content;
    data["type"] = this.type;
    data["sendMail"] = this.sendMail;
    data["userEmail"] = this.userEmail;
    return data;
  }
}

export interface ISendNotificationRequest {
  sendTo?: string;
  title?: string | undefined;
  content?: string | undefined;
  type?: string | undefined;
  sendMail?: boolean;
  userEmail?: string | undefined;
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
