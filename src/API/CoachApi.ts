//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming
import { API_COACH_URL } from "./config";
export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? API_COACH_URL;
    }

    /**
     * View Coach Availability
     * @param page (optional) 
     * @param recordPerPage (optional) 
     * @return OK
     */
    viewCoachAvailability(page: number | undefined, recordPerPage: number | undefined): Promise<AvailableScheduleSlot[]> {
        let url_ = this.baseUrl + "/availability?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordPerPage === null)
            throw new Error("The parameter 'recordPerPage' cannot be null.");
        else if (recordPerPage !== undefined)
            url_ += "RecordPerPage=" + encodeURIComponent("" + recordPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processViewCoachAvailability(_response);
        });
    }

    protected processViewCoachAvailability(response: Response): Promise<AvailableScheduleSlot[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(AvailableScheduleSlot.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401: any = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AvailableScheduleSlot[]>(null as any);
    }

    /**
     * Update Coach Schedule
     * @return OK
     */
    updateCoachSchedule(scheduleId: string, body: UpdateScheduleRequest): Promise<void> {
        let url_ = this.baseUrl + "/schedules/{scheduleId}";
        if (scheduleId === undefined || scheduleId === null)
            throw new Error("The parameter 'scheduleId' must be defined.");
        url_ = url_.replace("{scheduleId}", encodeURIComponent("" + scheduleId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCoachSchedule(_response);
        });
    }

    protected processUpdateCoachSchedule(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Delete a Coach's Schedule
     * @return No Content
     */
    deleteCoachSchedule(scheduleId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/schedules/{scheduleId}";
        if (scheduleId === undefined || scheduleId === null)
            throw new Error("The parameter 'scheduleId' must be defined.");
        url_ = url_.replace("{scheduleId}", encodeURIComponent("" + scheduleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCoachSchedule(_response);
        });
    }

    protected processDeleteCoachSchedule(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404: any = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
                let result409: any = null;
                let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result409 = ProblemDetails.fromJS(resultData409);
                return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Create Coach Schedule
     * @return Created
     */
    createCoachSchedule(body: AddCoachScheduleRequest): Promise<CreateCoachScheduleResult> {
        let url_ = this.baseUrl + "/schedules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCoachSchedule(_response);
        });
    }

    protected processCreateCoachSchedule(response: Response): Promise<CreateCoachScheduleResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
                let result201: any = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = CreateCoachScheduleResult.fromJS(resultData201);
                return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
                let result409: any = null;
                let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result409 = ProblemDetails.fromJS(resultData409);
                return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateCoachScheduleResult>(null as any);
    }

    /**
     * @return Created
     */
    createPackage(body: CreatePackageRequest): Promise<void> {
        let url_ = this.baseUrl + "/packages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePackage(_response);
        });
    }

    protected processCreatePackage(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get stats in a period
     * @param startTime (optional) 
     * @param endTime (optional) 
     * @return OK
     */
    getStats(startTime: Date | undefined, endTime: Date | undefined): Promise<void> {
        let url_ = this.baseUrl + "/dashboard/stats?";
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent(startTime ? "" + startTime.toISOString() : "") + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent(endTime ? "" + endTime.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetStats(_response);
        });
    }

    protected processGetStats(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    getCoaches(): Promise<CoachResponse[]> {
        let url_ = this.baseUrl + "/coaches";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCoaches(_response);
        });
    }

    protected processGetCoaches(response: Response): Promise<CoachResponse[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(CoachResponse.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CoachResponse[]>(null as any);
    }

    /**
     * Create Coach
     * @return Created
     */
    createCoach(body: CreateCoachRequest): Promise<CreateCoachResponse> {
        let url_ = this.baseUrl + "/coaches";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCoach(_response);
        });
    }

    protected processCreateCoach(response: Response): Promise<CreateCoachResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
                let result201: any = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = CreateCoachResponse.fromJS(resultData201);
                return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401: any = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateCoachResponse>(null as any);
    }

    /**
     * @return OK
     */
    getCoachById(id: string): Promise<CoachResponse> {
        let url_ = this.baseUrl + "/coaches/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCoachById(_response);
        });
    }

    protected processGetCoachById(response: Response): Promise<CoachResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = CoachResponse.fromJS(resultData200);
                return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404: any = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CoachResponse>(null as any);
    }

    /**
     * Update Booking Status
     * @return No Content
     */
    updateBookingStatus(bookingId: string, body: string): Promise<void> {
        let url_ = this.baseUrl + "/bookings/{bookingId}";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined.");
        url_ = url_.replace("{bookingId}", encodeURIComponent("" + bookingId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBookingStatus(_response);
        });
    }

    protected processUpdateBookingStatus(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
                return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
                let result404: any = null;
                let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result404 = ProblemDetails.fromJS(resultData404);
                return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get Booking Details
     * @return OK
     */
    getBookingById(bookingId: string): Promise<BookingDetailResult> {
        let url_ = this.baseUrl + "/booking/{bookingId}";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined.");
        url_ = url_.replace("{bookingId}", encodeURIComponent("" + bookingId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBookingById(_response);
        });
    }

    protected processGetBookingById(response: Response): Promise<BookingDetailResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result200 = BookingDetailResult.fromJS(resultData200);
                return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401: any = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookingDetailResult>(null as any);
    }

    /**
     * Get Coach Booking History
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param status (optional) 
     * @return OK
     */
    getCoachBookings(startDate: Date | undefined, endDate: Date | undefined, status: string | undefined, page: number, recordPerPage: number): Promise<BookingHistoryResult[]> {
        let url_ = this.baseUrl + "/bookings?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (page === undefined || page === null)
            throw new Error("The parameter 'page' must be defined and cannot be null.");
        else
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordPerPage === undefined || recordPerPage === null)
            throw new Error("The parameter 'recordPerPage' must be defined and cannot be null.");
        else
            url_ += "RecordPerPage=" + encodeURIComponent("" + recordPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCoachBookings(_response);
        });
    }

    protected processGetCoachBookings(response: Response): Promise<BookingHistoryResult[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
                let result200: any = null;
                let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                if (Array.isArray(resultData200)) {
                    result200 = [] as any;
                    for (let item of resultData200)
                        result200!.push(BookingHistoryResult.fromJS(item));
                }
                else {
                    result200 = <any>null;
                }
                return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
                let result401: any = null;
                let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result401 = ProblemDetails.fromJS(resultData401);
                return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookingHistoryResult[]>(null as any);
    }

    /**
     * Create Booking
     * @return Created
     */
    createBooking(body: CreateBookingRequest): Promise<CreateBookingResult> {
        let url_ = this.baseUrl + "/bookings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateBooking(_response);
        });
    }

    protected processCreateBooking(response: Response): Promise<CreateBookingResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
                let result201: any = null;
                let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result201 = CreateBookingResult.fromJS(resultData201);
                return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
                let result400: any = null;
                let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
                result400 = ProblemDetails.fromJS(resultData400);
                return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
                return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateBookingResult>(null as any);
    }
}

export class AddCoachScheduleRequest implements IAddCoachScheduleRequest {
    dayOfWeek?: number;
    startTime?: string;
    endTime?: string;

    constructor(data?: IAddCoachScheduleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dayOfWeek = _data["dayOfWeek"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
        }
    }

    static fromJS(data: any): AddCoachScheduleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddCoachScheduleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dayOfWeek"] = this.dayOfWeek;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        return data;
    }
}

export interface IAddCoachScheduleRequest {
    dayOfWeek?: number;
    startTime?: string;
    endTime?: string;
}

export class AvailableScheduleSlot implements IAvailableScheduleSlot {
    dayOfWeek?: number;
    startTime?: string;
    endTime?: string;

    constructor(data?: IAvailableScheduleSlot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dayOfWeek = _data["dayOfWeek"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
        }
    }

    static fromJS(data: any): AvailableScheduleSlot {
        data = typeof data === 'object' ? data : {};
        let result = new AvailableScheduleSlot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dayOfWeek"] = this.dayOfWeek;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        return data;
    }
}

export interface IAvailableScheduleSlot {
    dayOfWeek?: number;
    startTime?: string;
    endTime?: string;
}

export class BookingDetailResult implements IBookingDetailResult {
    id?: string;
    userId?: string;
    coachId?: string;
    sportId?: string;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;
    packageId?: string | undefined;

    constructor(data?: IBookingDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.coachId = _data["coachId"];
            this.sportId = _data["sportId"];
            this.bookingDate = _data["bookingDate"] ? new Date(_data["bookingDate"].toString()) : <any>undefined;
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.status = _data["status"];
            this.totalPrice = _data["totalPrice"];
            this.packageId = _data["packageId"];
        }
    }

    static fromJS(data: any): BookingDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new BookingDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["coachId"] = this.coachId;
        data["sportId"] = this.sportId;
        data["bookingDate"] = this.bookingDate ? formatDate(this.bookingDate) : <any>undefined;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["status"] = this.status;
        data["totalPrice"] = this.totalPrice;
        data["packageId"] = this.packageId;
        return data;
    }
}

export interface IBookingDetailResult {
    id?: string;
    userId?: string;
    coachId?: string;
    sportId?: string;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;
    packageId?: string | undefined;
}

export class BookingHistoryResult implements IBookingHistoryResult {
    id?: string;
    userId?: string;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;

    constructor(data?: IBookingHistoryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.bookingDate = _data["bookingDate"] ? new Date(_data["bookingDate"].toString()) : <any>undefined;
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.status = _data["status"];
            this.totalPrice = _data["totalPrice"];
        }
    }

    static fromJS(data: any): BookingHistoryResult {
        data = typeof data === 'object' ? data : {};
        let result = new BookingHistoryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["bookingDate"] = this.bookingDate ? formatDate(this.bookingDate) : <any>undefined;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["status"] = this.status;
        data["totalPrice"] = this.totalPrice;
        return data;
    }
}

export interface IBookingHistoryResult {
    id?: string;
    userId?: string;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;
}

export class CoachPackageResponse implements ICoachPackageResponse {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;

    constructor(data?: ICoachPackageResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.sessionCount = _data["sessionCount"];
        }
    }

    static fromJS(data: any): CoachPackageResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CoachPackageResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["sessionCount"] = this.sessionCount;
        return data;
    }
}

export interface ICoachPackageResponse {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
}

export class CoachResponse implements ICoachResponse {
    userId?: string;
    sportIds?: string[] | undefined;
    bio?: string | undefined;
    ratePerHour?: number;
    createdAt?: Date;
    packages?: CoachPackageResponse[] | undefined;

    constructor(data?: ICoachResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userId = _data["userId"];
            if (Array.isArray(_data["sportIds"])) {
                this.sportIds = [] as any;
                for (let item of _data["sportIds"])
                    this.sportIds!.push(item);
            }
            this.bio = _data["bio"];
            this.ratePerHour = _data["ratePerHour"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["packages"])) {
                this.packages = [] as any;
                for (let item of _data["packages"])
                    this.packages!.push(CoachPackageResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CoachResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CoachResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userId"] = this.userId;
        if (Array.isArray(this.sportIds)) {
            data["sportIds"] = [];
            for (let item of this.sportIds)
                data["sportIds"].push(item);
        }
        data["bio"] = this.bio;
        data["ratePerHour"] = this.ratePerHour;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        if (Array.isArray(this.packages)) {
            data["packages"] = [];
            for (let item of this.packages)
                data["packages"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICoachResponse {
    userId?: string;
    sportIds?: string[] | undefined;
    bio?: string | undefined;
    ratePerHour?: number;
    createdAt?: Date;
    packages?: CoachPackageResponse[] | undefined;
}

export class CreateBookingRequest implements ICreateBookingRequest {
    coachId?: string;
    sportId?: string;
    startTime?: Date;
    endTime?: Date;
    packageId?: string | undefined;

    constructor(data?: ICreateBookingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.coachId = _data["coachId"];
            this.sportId = _data["sportId"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.packageId = _data["packageId"];
        }
    }

    static fromJS(data: any): CreateBookingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBookingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coachId"] = this.coachId;
        data["sportId"] = this.sportId;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["packageId"] = this.packageId;
        return data;
    }
}

export interface ICreateBookingRequest {
    coachId?: string;
    sportId?: string;
    startTime?: Date;
    endTime?: Date;
    packageId?: string | undefined;
}

export class CreateBookingResult implements ICreateBookingResult {
    id?: string;
    sessionsRemaining?: number;

    constructor(data?: ICreateBookingResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sessionsRemaining = _data["sessionsRemaining"];
        }
    }

    static fromJS(data: any): CreateBookingResult {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBookingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sessionsRemaining"] = this.sessionsRemaining;
        return data;
    }
}

export interface ICreateBookingResult {
    id?: string;
    sessionsRemaining?: number;
}

export class CreateCoachRequest implements ICreateCoachRequest {
    sportId?: string;
    bio?: string | undefined;
    ratePerHour?: number;

    constructor(data?: ICreateCoachRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sportId = _data["sportId"];
            this.bio = _data["bio"];
            this.ratePerHour = _data["ratePerHour"];
        }
    }

    static fromJS(data: any): CreateCoachRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCoachRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sportId"] = this.sportId;
        data["bio"] = this.bio;
        data["ratePerHour"] = this.ratePerHour;
        return data;
    }
}

export interface ICreateCoachRequest {
    sportId?: string;
    bio?: string | undefined;
    ratePerHour?: number;
}

export class CreateCoachResponse implements ICreateCoachResponse {
    id?: string;
    createdAt?: Date;
    sportIds?: string[] | undefined;

    constructor(data?: ICreateCoachResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["sportIds"])) {
                this.sportIds = [] as any;
                for (let item of _data["sportIds"])
                    this.sportIds!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateCoachResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCoachResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        if (Array.isArray(this.sportIds)) {
            data["sportIds"] = [];
            for (let item of this.sportIds)
                data["sportIds"].push(item);
        }
        return data;
    }
}

export interface ICreateCoachResponse {
    id?: string;
    createdAt?: Date;
    sportIds?: string[] | undefined;
}

export class CreateCoachScheduleResult implements ICreateCoachScheduleResult {
    id?: string;

    constructor(data?: ICreateCoachScheduleResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateCoachScheduleResult {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCoachScheduleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateCoachScheduleResult {
    id?: string;
}

export class CreatePackageRequest implements ICreatePackageRequest {
    coachId?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;

    constructor(data?: ICreatePackageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.coachId = _data["coachId"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.sessionCount = _data["sessionCount"];
        }
    }

    static fromJS(data: any): CreatePackageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePackageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coachId"] = this.coachId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["sessionCount"] = this.sessionCount;
        return data;
    }
}

export interface ICreatePackageRequest {
    coachId?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class UpdateScheduleRequest implements IUpdateScheduleRequest {
    dayOfWeek?: number;
    startTime?: string;
    endTime?: string;

    constructor(data?: IUpdateScheduleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dayOfWeek = _data["dayOfWeek"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
        }
    }

    static fromJS(data: any): UpdateScheduleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateScheduleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dayOfWeek"] = this.dayOfWeek;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        return data;
    }
}

export interface IUpdateScheduleRequest {
    dayOfWeek?: number;
    startTime?: string;
    endTime?: string;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' +
        (d.getMonth() < 9 ? ('0' + (d.getMonth() + 1)) : (d.getMonth() + 1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}