//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { API_COACH_URL } from "./config";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? API_COACH_URL;
    }
    private getAuthHeaders(): HeadersInit {
        // Get token from localStorage (which is synced with Redux store)
        const token = localStorage.getItem("token");
        
        // Return headers with Authorization if token exists
        return token ? {
            "Authorization": `Bearer ${token}`,
            "Accept": "application/json"
        } : {
            "Accept": "application/json"
        };
    }
    /**
     * Update Booking Status
     * @return No Content
     */
    updateBookingStatus(bookingId: string, body: string): Promise<void> {
        let url_ = this.baseUrl + "/bookings/{bookingId}";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined.");
        url_ = url_.replace("{bookingId}", encodeURIComponent("" + bookingId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBookingStatus(_response);
        });
    }

    protected processUpdateBookingStatus(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Get Booking Details
     * @return OK
     */
    getBookingById(bookingId: string): Promise<BookingDetailResult> {
        let url_ = this.baseUrl + "/booking/{bookingId}";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined.");
        url_ = url_.replace("{bookingId}", encodeURIComponent("" + bookingId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBookingById(_response);
        });
    }

    protected processGetBookingById(response: Response): Promise<BookingDetailResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BookingDetailResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookingDetailResult>(null as any);
    }

    /**
     * Get Coach Booking History
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param status (optional) 
     * @param sportId (optional) 
     * @param packageId (optional) 
     * @return OK
     */
    getCoachBookings(startDate: Date | undefined, endDate: Date | undefined, status: string | undefined, pageIndex: number, pageSize: number, sportId: string | undefined, packageId: string | undefined): Promise<BookingHistoryResultPaginatedResult> {
        let url_ = this.baseUrl + "/bookings?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (pageIndex === undefined || pageIndex === null)
            throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
        else
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sportId === null)
            throw new Error("The parameter 'sportId' cannot be null.");
        else if (sportId !== undefined)
            url_ += "SportId=" + encodeURIComponent("" + sportId) + "&";
        if (packageId === null)
            throw new Error("The parameter 'packageId' cannot be null.");
        else if (packageId !== undefined)
            url_ += "PackageId=" + encodeURIComponent("" + packageId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCoachBookings(_response);
        });
    }

    protected processGetCoachBookings(response: Response): Promise<BookingHistoryResultPaginatedResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BookingHistoryResultPaginatedResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookingHistoryResultPaginatedResult>(null as any);
    }

    /**
     * Create Booking
     * @return Created
     */
    createBooking(body: CreateBookingRequest): Promise<CreateBookingResult> {
        let url_ = this.baseUrl + "/bookings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateBooking(_response);
        });
    }

    protected processCreateBooking(response: Response): Promise<CreateBookingResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateBookingResult.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateBookingResult>(null as any);
    }

    /**
     * Get User Booking History
     * @param startDate (optional) 
     * @param endDate (optional) 
     * @param status (optional) 
     * @param sportId (optional) 
     * @param coachId (optional) 
     * @param packageId (optional) 
     * @return OK
     */
    getUserBookings(startDate: Date | undefined, endDate: Date | undefined, status: string | undefined, pageIndex: number, pageSize: number, sportId: string | undefined, coachId: string | undefined, packageId: string | undefined): Promise<UserBookingHistoryResultPaginatedResult> {
        let url_ = this.baseUrl + "/user-bookings?";
        if (startDate === null)
            throw new Error("The parameter 'startDate' cannot be null.");
        else if (startDate !== undefined)
            url_ += "StartDate=" + encodeURIComponent(formatDate(startDate)) + "&";
        if (endDate === null)
            throw new Error("The parameter 'endDate' cannot be null.");
        else if (endDate !== undefined)
            url_ += "EndDate=" + encodeURIComponent(formatDate(endDate)) + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "Status=" + encodeURIComponent("" + status) + "&";
        if (pageIndex === undefined || pageIndex === null)
            throw new Error("The parameter 'pageIndex' must be defined and cannot be null.");
        else
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === undefined || pageSize === null)
            throw new Error("The parameter 'pageSize' must be defined and cannot be null.");
        else
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sportId === null)
            throw new Error("The parameter 'sportId' cannot be null.");
        else if (sportId !== undefined)
            url_ += "SportId=" + encodeURIComponent("" + sportId) + "&";
        if (coachId === null)
            throw new Error("The parameter 'coachId' cannot be null.");
        else if (coachId !== undefined)
            url_ += "CoachId=" + encodeURIComponent("" + coachId) + "&";
        if (packageId === null)
            throw new Error("The parameter 'packageId' cannot be null.");
        else if (packageId !== undefined)
            url_ += "PackageId=" + encodeURIComponent("" + packageId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetUserBookings(_response);
        });
    }

    protected processGetUserBookings(response: Response): Promise<UserBookingHistoryResultPaginatedResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UserBookingHistoryResultPaginatedResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UserBookingHistoryResultPaginatedResult>(null as any);
    }

 /**
     * Update My Coach Profile
     * @param request (optional) 
     * @return OK
     */
 updateMyProfile(formData: FormData): Promise<void> {
    let url_ = this.baseUrl + "/api/my-profile";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        body: formData, // Use the FormData object directly
        method: "PUT",
        headers: {
            ...this.getAuthHeaders(),
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processUpdateMyProfile(_response);
    });
}

protected processUpdateMyProfile(response: Response): Promise<void> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        return;
        });
    } else if (status === 400) {
        return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<void>(null as any);
}


    /**
     * Update Coach
     * @param request (optional) 
     * @return OK
     */
    updateCoach(coachId: string, request: UpdateCoachRequest | undefined): Promise<void> {
        let url_ = this.baseUrl + "/api/coaches/{coachId}";
        if (coachId === undefined || coachId === null)
            throw new Error("The parameter 'coachId' must be defined.");
        url_ = url_.replace("{coachId}", encodeURIComponent("" + coachId));
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (request === null)
            throw new Error("The parameter 'request' cannot be null.");
        else if (request !== undefined)
            content_ += encodeURIComponent("request") + "=" + encodeURIComponent("" + request) + "&";
        content_ = content_.replace(/&$/, "");

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "multipart/form-data",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCoach(_response);
        });
    }

    protected processUpdateCoach(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }


    
    /**
     * Get authenticated coach's profile
     * @return OK
     */
    getMyCoachProfile(): Promise<CoachResponse> {
        let url_ = this.baseUrl + "/coaches/me";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetMyCoachProfile(_response);
        });
    }

    protected processGetMyCoachProfile(response: Response): Promise<CoachResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CoachResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CoachResponse>(null as any);
    }

    /**
     * @return OK
     */
 /**
     * @param name (optional) 
     * @param sportId (optional) 
     * @param minPrice (optional) 
     * @param maxPrice (optional) 
     * @return OK
     */
 getCoaches(name: string | undefined, sportId: string | undefined, minPrice: number | undefined, maxPrice: number | undefined): Promise<CoachResponse[]> {
    let url_ = this.baseUrl + "/coaches?";
    if (name === null)
        throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined)
        url_ += "name=" + encodeURIComponent("" + name) + "&";
    if (sportId === null)
        throw new Error("The parameter 'sportId' cannot be null.");
    else if (sportId !== undefined)
        url_ += "sportId=" + encodeURIComponent("" + sportId) + "&";
    if (minPrice === null)
        throw new Error("The parameter 'minPrice' cannot be null.");
    else if (minPrice !== undefined)
        url_ += "minPrice=" + encodeURIComponent("" + minPrice) + "&";
    if (maxPrice === null)
        throw new Error("The parameter 'maxPrice' cannot be null.");
    else if (maxPrice !== undefined)
        url_ += "maxPrice=" + encodeURIComponent("" + maxPrice) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: {
            ...this.getAuthHeaders(),
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetCoaches(_response);
    });
}

protected processGetCoaches(response: Response): Promise<CoachResponse[]> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push(CoachResponse.fromJS(item));
        }
        else {
            result200 = <any>null;
        }
        return result200;
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<CoachResponse[]>(null as any);
}

    /**
     * Create Coach
     * @param request (optional) 
     * @return Created
     */
    createCoach(request: CreateCoachRequest | undefined): Promise<CreateCoachResponse> {
        let url_ = this.baseUrl + "/coaches";
        url_ = url_.replace(/[?&]$/, "");

        let content_ = "";
        if (request === null)
            throw new Error("The parameter 'request' cannot be null.");
        
        let formData = new FormData();
    
        // Thêm dữ liệu từ request vào formData
        if (request?.sportId) formData.append('sportId', request.sportId);
        if (request?.fullName) formData.append('fullName', request.fullName);
        if (request?.email) formData.append('email', request.email);
        if (request?.phone) formData.append('phone', request.phone);
        if (request?.bio) formData.append('bio', request.bio);
        if (request?.ratePerHour) formData.append('ratePerHour', request.ratePerHour.toString());
        if (request?.avatar) formData.append('avatar', request.avatar);
        if (request?.images) {
            request?.images.forEach(image => formData.append('images', image));
        }
    
        let options_: RequestInit = {
            body: formData,  // Sử dụng FormData làm body của yêu cầu
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCoach(_response);
        });
    }

    protected processCreateCoach(response: Response): Promise<CreateCoachResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateCoachResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateCoachResponse>(null as any);
    }

    /**
     * @return OK
     */
    getCoachById(id: string): Promise<CoachResponse> {
        let url_ = this.baseUrl + "/coaches/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCoachById(_response);
        });
    }

    protected processGetCoachById(response: Response): Promise<CoachResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CoachResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CoachResponse>(null as any);
    }

    /**
     * Get Coach Dashboard Stats
     * @param start_date (optional) 
     * @param end_date (optional) 
     * @return OK
     */
    getCoachDashboardStats(start_date: string | undefined, end_date: string | undefined, group_by: string): Promise<GetStatsResponse> {
        let url_ = this.baseUrl + "/api/coach/dashboard/stats?";
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (group_by === undefined || group_by === null)
            throw new Error("The parameter 'group_by' must be defined and cannot be null.");
        else
            url_ += "group_by=" + encodeURIComponent("" + group_by) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCoachDashboardStats(_response);
        });
    }

    protected processGetCoachDashboardStats(response: Response): Promise<GetStatsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetStatsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetStatsResponse>(null as any);
    }

 /**
     * Update Coach Package
     * @return OK
     */
 updatePackage(packageId: string, body: UpdatePackageRequest): Promise<UpdatePackageResult> {
    let url_ = this.baseUrl + "/packages/{packageId}";
    if (packageId === undefined || packageId === null)
        throw new Error("The parameter 'packageId' must be defined.");
    url_ = url_.replace("{packageId}", encodeURIComponent("" + packageId));
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
        body: content_,
        method: "PUT",
        headers: {
            ...this.getAuthHeaders(),
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processUpdatePackage(_response);
    });
}

protected processUpdatePackage(response: Response): Promise<UpdatePackageResult> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = UpdatePackageResult.fromJS(resultData200);
        return result200;
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status === 403) {
        return response.text().then((_responseText) => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ProblemDetails.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
        });
    } else if (status === 404) {
        return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<UpdatePackageResult>(null as any);
}

/**
 * Delete/Deactivate Coach Package
 * @return OK
 */
deletePackage(packageId: string): Promise<DeletePackageResult> {
    let url_ = this.baseUrl + "/packages/{packageId}";
    if (packageId === undefined || packageId === null)
        throw new Error("The parameter 'packageId' must be defined.");
    url_ = url_.replace("{packageId}", encodeURIComponent("" + packageId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "DELETE",
        headers: {
            ...this.getAuthHeaders(),
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processDeletePackage(_response);
    });
}

protected processDeletePackage(response: Response): Promise<DeletePackageResult> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = DeletePackageResult.fromJS(resultData200);
        return result200;
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status === 403) {
        return response.text().then((_responseText) => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ProblemDetails.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
        });
    } else if (status === 404) {
        return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<DeletePackageResult>(null as any);
}



    /**
     * @return OK
     */
    purchasePackage(body: PurchasePackageRequest): Promise<PurchasePackageResult> {
        let url_ = this.baseUrl + "/api/coach-packages/purchases";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processPurchasePackage(_response);
        });
    }

    protected processPurchasePackage(response: Response): Promise<PurchasePackageResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PurchasePackageResult.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PurchasePackageResult>(null as any);
    }

    /**
     * @param isExpiried (optional) 
     * @param isOutOfUse (optional) 
     * @param coachId (optional) 
     * @param page (optional) 
     * @param recordPerPage (optional) 
     * @return OK
     */
    getHistoryPurchase(isExpiried: boolean | undefined, isOutOfUse: boolean | undefined, coachId: string | undefined, page: number | undefined, recordPerPage: number | undefined): Promise<PurchaseRecord[]> {
        let url_ = this.baseUrl + "/api/coach-packages/purchases?";
        if (isExpiried === null)
            throw new Error("The parameter 'isExpiried' cannot be null.");
        else if (isExpiried !== undefined)
            url_ += "IsExpiried=" + encodeURIComponent("" + isExpiried) + "&";
        if (isOutOfUse === null)
            throw new Error("The parameter 'isOutOfUse' cannot be null.");
        else if (isOutOfUse !== undefined)
            url_ += "IsOutOfUse=" + encodeURIComponent("" + isOutOfUse) + "&";
        if (coachId === null)
            throw new Error("The parameter 'coachId' cannot be null.");
        else if (coachId !== undefined)
            url_ += "CoachId=" + encodeURIComponent("" + coachId) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordPerPage === null)
            throw new Error("The parameter 'recordPerPage' cannot be null.");
        else if (recordPerPage !== undefined)
            url_ += "RecordPerPage=" + encodeURIComponent("" + recordPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetHistoryPurchase(_response);
        });
    }

    protected processGetHistoryPurchase(response: Response): Promise<PurchaseRecord[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PurchaseRecord.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PurchaseRecord[]>(null as any);
    }



    /**
     * @return OK
     */
    getPurchaseDetail(purchaseId: string): Promise<PurchaseDetail> {
        let url_ = this.baseUrl + "/api/coach-packages/purchases/{purchaseId}";
        if (purchaseId === undefined || purchaseId === null)
            throw new Error("The parameter 'purchaseId' must be defined.");
        url_ = url_.replace("{purchaseId}", encodeURIComponent("" + purchaseId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetPurchaseDetail(_response);
        });
    }

    protected processGetPurchaseDetail(response: Response): Promise<PurchaseDetail> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = PurchaseDetail.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PurchaseDetail>(null as any);
    }

 /**
     * Get Coach Packages
     * @return OK
     */
 getCoachPackages(): Promise<PackageResponse[]> {
    let url_ = this.baseUrl + "/coach-packages";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: {
            ...this.getAuthHeaders(),
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetCoachPackages(_response);
    });
}

protected processGetCoachPackages(response: Response): Promise<PackageResponse[]> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push(PackageResponse.fromJS(item));
        }
        else {
            result200 = <any>null;
        }
        return result200;
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<PackageResponse[]>(null as any);
}

/**
 * Get Active Coach Packages
 * @return OK
 */
getActivePackages(coachId: string): Promise<PackageResponse[]> {
    let url_ = this.baseUrl + "/coaches/{coachId}/active-packages";
    if (coachId === undefined || coachId === null)
        throw new Error("The parameter 'coachId' must be defined.");
    url_ = url_.replace("{coachId}", encodeURIComponent("" + coachId));
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: {
            ...this.getAuthHeaders(),
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetActivePackages(_response);
    });
}

protected processGetActivePackages(response: Response): Promise<PackageResponse[]> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        if (Array.isArray(resultData200)) {
            result200 = [] as any;
            for (let item of resultData200)
                result200!.push(PackageResponse.fromJS(item));
        }
        else {
            result200 = <any>null;
        }
        return result200;
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<PackageResponse[]>(null as any);
}


    /**
     * @return Created
     */
    createPackage(body: CreatePackageRequest): Promise<void> {
        let url_ = this.baseUrl + "/packages";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreatePackage(_response);
        });
    }

    protected processCreatePackage(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    updateCoachPromotion(promotionId: string, body: UpdateCoachPromotionRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/coaches/promotions/{promotionId}?";
        if (promotionId === undefined || promotionId === null)
            throw new Error("The parameter 'promotionId' must be defined and cannot be null.");
        else
            url_ += "promotionId=" + encodeURIComponent("" + promotionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCoachPromotion(_response);
        });
    }

    protected processUpdateCoachPromotion(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @return OK
     */
    deletePromotion(promotionId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/coaches/promotions/{promotionId}?";
        if (promotionId === undefined || promotionId === null)
            throw new Error("The parameter 'promotionId' must be defined and cannot be null.");
        else
            url_ += "promotionId=" + encodeURIComponent("" + promotionId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                ...this.getAuthHeaders(),
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeletePromotion(_response);
        });
    }

    protected processDeletePromotion(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * @param page (optional) 
     * @param recordPerPage (optional) 
     * @return OK
     */
    getAllPromotion(coachId: string, page: number | undefined, recordPerPage: number | undefined): Promise<PromotionRecord[]> {
        let url_ = this.baseUrl + "/api/coaches/{coachId}/promotions?";
        if (coachId === undefined || coachId === null)
            throw new Error("The parameter 'coachId' must be defined.");
        url_ = url_.replace("{coachId}", encodeURIComponent("" + coachId));
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "Page=" + encodeURIComponent("" + page) + "&";
        if (recordPerPage === null)
            throw new Error("The parameter 'recordPerPage' cannot be null.");
        else if (recordPerPage !== undefined)
            url_ += "RecordPerPage=" + encodeURIComponent("" + recordPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllPromotion(_response);
        });
    }


    protected processGetAllPromotion(response: Response): Promise<PromotionRecord[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(PromotionRecord.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<PromotionRecord[]>(null as any);
    }

    /**
     * @return Created
     */
    createCoachPromotion(coachId: string, body: CreateCoachPromotionRequest): Promise<void> {
        let url_ = this.baseUrl + "/api/coaches/{coachId}/promotions?";
        if (coachId === undefined || coachId === null)
            throw new Error("The parameter 'coachId' must be defined and cannot be null.");
        else
            url_ += "coachId=" + encodeURIComponent("" + coachId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCoachPromotion(_response);
        });
    }

    protected processCreateCoachPromotion(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }
 /**
     * Get Public Coach Schedules
     * @param page (optional) 
     * @param recordPerPage (optional) 
     * @return OK
     */
 getPublicCoachSchedules(coachId: string, start_date: string, end_date: string, page: number | undefined, recordPerPage: number | undefined): Promise<CoachSchedulesResponse> {
    let url_ = this.baseUrl + "/api/public/coach-schedules/{coachId}?";
    if (coachId === undefined || coachId === null)
        throw new Error("The parameter 'coachId' must be defined.");
    url_ = url_.replace("{coachId}", encodeURIComponent("" + coachId));
    if (start_date === undefined || start_date === null)
        throw new Error("The parameter 'start_date' must be defined and cannot be null.");
    else
        url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
    if (end_date === undefined || end_date === null)
        throw new Error("The parameter 'end_date' must be defined and cannot be null.");
    else
        url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (recordPerPage === null)
        throw new Error("The parameter 'recordPerPage' cannot be null.");
    else if (recordPerPage !== undefined)
        url_ += "recordPerPage=" + encodeURIComponent("" + recordPerPage) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: {
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetPublicCoachSchedules(_response);
    });
}

protected processGetPublicCoachSchedules(response: Response): Promise<CoachSchedulesResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CoachSchedulesResponse.fromJS(resultData200);
        return result200;
        });
    } else if (status === 400) {
        return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<CoachSchedulesResponse>(null as any);
}

    /**
     * Get Coach Schedules
     * @param page (optional) 
     * @param recordPerPage (optional) 
     * @return OK
     */
    getCoachSchedules(start_date: string, end_date: string, page: number | undefined, recordPerPage: number | undefined): Promise<CoachSchedulesResponse> {
        let url_ = this.baseUrl + "/api/coach-schedules?";
        if (start_date === undefined || start_date === null)
            throw new Error("The parameter 'start_date' must be defined and cannot be null.");
        else
            url_ += "start_date=" + encodeURIComponent("" + start_date) + "&";
        if (end_date === undefined || end_date === null)
            throw new Error("The parameter 'end_date' must be defined and cannot be null.");
        else
            url_ += "end_date=" + encodeURIComponent("" + end_date) + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (recordPerPage === null)
            throw new Error("The parameter 'recordPerPage' cannot be null.");
        else if (recordPerPage !== undefined)
            url_ += "recordPerPage=" + encodeURIComponent("" + recordPerPage) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCoachSchedules(_response);
        });
    }

    protected processGetCoachSchedules(response: Response): Promise<CoachSchedulesResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CoachSchedulesResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CoachSchedulesResponse>(null as any);
    }

    /**
     * Update Coach Schedule
     * @return OK
     */
    updateCoachSchedule(scheduleId: string, body: UpdateScheduleRequest): Promise<void> {
        let url_ = this.baseUrl + "/schedules/{scheduleId}";
        if (scheduleId === undefined || scheduleId === null)
            throw new Error("The parameter 'scheduleId' must be defined.");
        url_ = url_.replace("{scheduleId}", encodeURIComponent("" + scheduleId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCoachSchedule(_response);
        });
    }

    protected processUpdateCoachSchedule(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Delete a Coach's Schedule
     * @return No Content
     */
    deleteCoachSchedule(scheduleId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/schedules/{scheduleId}";
        if (scheduleId === undefined || scheduleId === null)
            throw new Error("The parameter 'scheduleId' must be defined.");
        url_ = url_.replace("{scheduleId}", encodeURIComponent("" + scheduleId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                ...this.getAuthHeaders(),
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCoachSchedule(_response);
        });
    }

    protected processDeleteCoachSchedule(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Create Coach Schedule
     * @return Created
     */
    createCoachSchedule(body: AddCoachScheduleRequest): Promise<CreateCoachScheduleResult> {
        let url_ = this.baseUrl + "/schedules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCoachSchedule(_response);
        });
    }

    protected processCreateCoachSchedule(response: Response): Promise<CreateCoachScheduleResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateCoachScheduleResult.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 409) {
            return response.text().then((_responseText) => {
            let result409: any = null;
            let resultData409 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result409 = ProblemDetails.fromJS(resultData409);
            return throwException("Conflict", status, _responseText, _headers, result409);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateCoachScheduleResult>(null as any);
    }
}

export class AddCoachScheduleRequest implements IAddCoachScheduleRequest {
    dayOfWeek?: number;
    startTime?: string;
    endTime?: string;

    constructor(data?: IAddCoachScheduleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dayOfWeek = _data["dayOfWeek"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
        }
    }

    static fromJS(data: any): AddCoachScheduleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new AddCoachScheduleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dayOfWeek"] = this.dayOfWeek;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        return data;
    }
}

export interface IAddCoachScheduleRequest {
    dayOfWeek?: number;
    startTime?: string;
    endTime?: string;
}

export class BookingDetailResult implements IBookingDetailResult {
    id?: string;
    userId?: string;
    coachId?: string;
    sportId?: string;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;
    packageId?: string | undefined;

    constructor(data?: IBookingDetailResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.coachId = _data["coachId"];
            this.sportId = _data["sportId"];
            this.bookingDate = _data["bookingDate"] ? new Date(_data["bookingDate"].toString()) : <any>undefined;
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.status = _data["status"];
            this.totalPrice = _data["totalPrice"];
            this.packageId = _data["packageId"];
        }
    }

    static fromJS(data: any): BookingDetailResult {
        data = typeof data === 'object' ? data : {};
        let result = new BookingDetailResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["coachId"] = this.coachId;
        data["sportId"] = this.sportId;
        data["bookingDate"] = this.bookingDate ? formatDate(this.bookingDate) : <any>undefined;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["status"] = this.status;
        data["totalPrice"] = this.totalPrice;
        data["packageId"] = this.packageId;
        return data;
    }
}

export interface IBookingDetailResult {
    id?: string;
    userId?: string;
    coachId?: string;
    sportId?: string;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;
    packageId?: string | undefined;
}

export class BookingHistoryResult implements IBookingHistoryResult {
    id?: string;
    userId?: string;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;

    constructor(data?: IBookingHistoryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.bookingDate = _data["bookingDate"] ? new Date(_data["bookingDate"].toString()) : <any>undefined;
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.status = _data["status"];
            this.totalPrice = _data["totalPrice"];
        }
    }

    static fromJS(data: any): BookingHistoryResult {
        data = typeof data === 'object' ? data : {};
        let result = new BookingHistoryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["bookingDate"] = this.bookingDate ? formatDate(this.bookingDate) : <any>undefined;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["status"] = this.status;
        data["totalPrice"] = this.totalPrice;
        return data;
    }
}

export interface IBookingHistoryResult {
    id?: string;
    userId?: string;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;
}

export class BookingHistoryResultPaginatedResult implements IBookingHistoryResultPaginatedResult {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: BookingHistoryResult[] | undefined;

    constructor(data?: IBookingHistoryResultPaginatedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.count = _data["count"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(BookingHistoryResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BookingHistoryResultPaginatedResult {
        data = typeof data === 'object' ? data : {};
        let result = new BookingHistoryResultPaginatedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["count"] = this.count;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBookingHistoryResultPaginatedResult {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: BookingHistoryResult[] | undefined;
}

export class CoachPackageResponse implements ICoachPackageResponse {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;

    constructor(data?: ICoachPackageResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.sessionCount = _data["sessionCount"];
        }
    }

    static fromJS(data: any): CoachPackageResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CoachPackageResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["sessionCount"] = this.sessionCount;
        return data;
    }
}

export interface ICoachPackageResponse {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
}

export class CoachResponse implements ICoachResponse {
    id?: string;
    fullName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    avatar?: string | undefined;
    imageUrls?: string[] | undefined;
    sportIds?: string[] | undefined;
    bio?: string | undefined;
    ratePerHour?: number;
    createdAt?: Date;
    packages?: CoachPackageResponse[] | undefined;
    weeklySchedule?: CoachWeeklyScheduleResponse[] | undefined;

    constructor(data?: ICoachResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.avatar = _data["avatar"];
            if (Array.isArray(_data["imageUrls"])) {
                this.imageUrls = [] as any;
                for (let item of _data["imageUrls"])
                    this.imageUrls!.push(item);
            }
            if (Array.isArray(_data["sportIds"])) {
                this.sportIds = [] as any;
                for (let item of _data["sportIds"])
                    this.sportIds!.push(item);
            }
            this.bio = _data["bio"];
            this.ratePerHour = _data["ratePerHour"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["packages"])) {
                this.packages = [] as any;
                for (let item of _data["packages"])
                    this.packages!.push(CoachPackageResponse.fromJS(item));
            }
            if (Array.isArray(_data["weeklySchedule"])) {
                this.weeklySchedule = [] as any;
                for (let item of _data["weeklySchedule"])
                    this.weeklySchedule!.push(CoachWeeklyScheduleResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CoachResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CoachResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["avatar"] = this.avatar;
        if (Array.isArray(this.imageUrls)) {
            data["imageUrls"] = [];
            for (let item of this.imageUrls)
                data["imageUrls"].push(item);
        }
        if (Array.isArray(this.sportIds)) {
            data["sportIds"] = [];
            for (let item of this.sportIds)
                data["sportIds"].push(item);
        }
        data["bio"] = this.bio;
        data["ratePerHour"] = this.ratePerHour;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        if (Array.isArray(this.packages)) {
            data["packages"] = [];
            for (let item of this.packages)
                data["packages"].push(item.toJSON());
        }
        if (Array.isArray(this.weeklySchedule)) {
            data["weeklySchedule"] = [];
            for (let item of this.weeklySchedule)
                data["weeklySchedule"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICoachResponse {
    id?: string;
    fullName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    avatar?: string | undefined;
    imageUrls?: string[] | undefined;
    sportIds?: string[] | undefined;
    bio?: string | undefined;
    ratePerHour?: number;
    createdAt?: Date;
    packages?: CoachPackageResponse[] | undefined;
    weeklySchedule?: CoachWeeklyScheduleResponse[] | undefined;
}

export class CoachSchedulesResponse implements ICoachSchedulesResponse {
    page?: number;
    recordPerPage?: number;
    totalRecords?: number;
    totalPages?: number;
    schedules?: ScheduleSlotResponse[] | undefined;

    constructor(data?: ICoachSchedulesResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.page = _data["page"];
            this.recordPerPage = _data["recordPerPage"];
            this.totalRecords = _data["totalRecords"];
            this.totalPages = _data["totalPages"];
            if (Array.isArray(_data["schedules"])) {
                this.schedules = [] as any;
                for (let item of _data["schedules"])
                    this.schedules!.push(ScheduleSlotResponse.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CoachSchedulesResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CoachSchedulesResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["page"] = this.page;
        data["recordPerPage"] = this.recordPerPage;
        data["totalRecords"] = this.totalRecords;
        data["totalPages"] = this.totalPages;
        if (Array.isArray(this.schedules)) {
            data["schedules"] = [];
            for (let item of this.schedules)
                data["schedules"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICoachSchedulesResponse {
    page?: number;
    recordPerPage?: number;
    totalRecords?: number;
    totalPages?: number;
    schedules?: ScheduleSlotResponse[] | undefined;
}

export class CoachWeeklyScheduleResponse implements ICoachWeeklyScheduleResponse {
    dayOfWeek?: number;
    dayName?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    scheduleId?: string;

    constructor(data?: ICoachWeeklyScheduleResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dayOfWeek = _data["dayOfWeek"];
            this.dayName = _data["dayName"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.scheduleId = _data["scheduleId"];
        }
    }

    static fromJS(data: any): CoachWeeklyScheduleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CoachWeeklyScheduleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dayOfWeek"] = this.dayOfWeek;
        data["dayName"] = this.dayName;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["scheduleId"] = this.scheduleId;
        return data;
    }
}

export interface ICoachWeeklyScheduleResponse {
    dayOfWeek?: number;
    dayName?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    scheduleId?: string;
}

export class CreateBookingRequest implements ICreateBookingRequest {
    coachId?: string;
    sportId?: string;
    startTime?: Date;
    endTime?: Date;
    packageId?: string | undefined;

    constructor(data?: ICreateBookingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.coachId = _data["coachId"];
            this.sportId = _data["sportId"];
            this.startTime = _data["startTime"] ? new Date(_data["startTime"].toString()) : <any>undefined;
            this.endTime = _data["endTime"] ? new Date(_data["endTime"].toString()) : <any>undefined;
            this.packageId = _data["packageId"];
        }
    }

    static fromJS(data: any): CreateBookingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBookingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coachId"] = this.coachId;
        data["sportId"] = this.sportId;
        data["startTime"] = this.startTime ? this.startTime.toISOString() : <any>undefined;
        data["endTime"] = this.endTime ? this.endTime.toISOString() : <any>undefined;
        data["packageId"] = this.packageId;
        return data;
    }
}

export interface ICreateBookingRequest {
    coachId?: string;
    sportId?: string;
    startTime?: Date;
    endTime?: Date;
    packageId?: string | undefined;
}

export class CreateCoachPromotionRequest implements ICreateCoachPromotionRequest {
    packageId?: string | undefined;
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;

    constructor(data?: ICreateCoachPromotionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageId = _data["packageId"];
            this.description = _data["description"];
            this.discountType = _data["discountType"];
            this.discountValue = _data["discountValue"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCoachPromotionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCoachPromotionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageId"] = this.packageId;
        data["description"] = this.description;
        data["discountType"] = this.discountType;
        data["discountValue"] = this.discountValue;
        data["validFrom"] = this.validFrom ? formatDate(this.validFrom) : <any>undefined;
        data["validTo"] = this.validTo ? formatDate(this.validTo) : <any>undefined;
        return data;
    }
}

export interface ICreateCoachPromotionRequest {
    packageId?: string | undefined;
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;
}


export class CreateCoachRequest implements ICreateCoachRequest {
    sportId?: string;
    fullName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    bio?: string | undefined;
    ratePerHour?: number;
    avatar?: string | undefined;
    images?: string[] | undefined;

    constructor(data?: ICreateCoachRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sportId = _data["sportId"];
            this.fullName = _data["fullName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.bio = _data["bio"];
            this.ratePerHour = _data["ratePerHour"];
            this.avatar = _data["avatar"];
            if (Array.isArray(_data["images"])) {
                this.images = [] as any;
                for (let item of _data["images"])
                    this.images!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateCoachRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCoachRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sportId"] = this.sportId;
        data["fullName"] = this.fullName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["bio"] = this.bio;
        data["ratePerHour"] = this.ratePerHour;
        data["avatar"] = this.avatar;
        if (Array.isArray(this.images)) {
            data["images"] = [];
            for (let item of this.images)
                data["images"].push(item);
        }
        return data;
    }
}

export interface ICreateCoachRequest {
    sportId?: string;
    fullName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    bio?: string | undefined;
    ratePerHour?: number;
    avatar?: string | undefined;
    images?: string[] | undefined;
}

export class CreateCoachResponse implements ICreateCoachResponse {
    id?: string;
    fullName?: string | undefined;
    avatarUrl?: string | undefined;
    imageUrls?: string[] | undefined;
    createdAt?: Date;
    sportIds?: string[] | undefined;

    constructor(data?: ICreateCoachResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.fullName = _data["fullName"];
            this.avatarUrl = _data["avatarUrl"];
            if (Array.isArray(_data["imageUrls"])) {
                this.imageUrls = [] as any;
                for (let item of _data["imageUrls"])
                    this.imageUrls!.push(item);
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            if (Array.isArray(_data["sportIds"])) {
                this.sportIds = [] as any;
                for (let item of _data["sportIds"])
                    this.sportIds!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateCoachResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCoachResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["fullName"] = this.fullName;
        data["avatarUrl"] = this.avatarUrl;
        if (Array.isArray(this.imageUrls)) {
            data["imageUrls"] = [];
            for (let item of this.imageUrls)
                data["imageUrls"].push(item);
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        if (Array.isArray(this.sportIds)) {
            data["sportIds"] = [];
            for (let item of this.sportIds)
                data["sportIds"].push(item);
        }
        return data;
    }
}

export interface ICreateCoachResponse {
    id?: string;
    fullName?: string | undefined;
    avatarUrl?: string | undefined;
    imageUrls?: string[] | undefined;
    createdAt?: Date;
    sportIds?: string[] | undefined;
}
export class CreateBookingResult implements ICreateBookingResult {
    id?: string;
    sessionsRemaining?: number;

    constructor(data?: ICreateBookingResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.sessionsRemaining = _data["sessionsRemaining"];
        }
    }

    static fromJS(data: any): CreateBookingResult {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBookingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["sessionsRemaining"] = this.sessionsRemaining;
        return data;
    }
}

export interface ICreateBookingResult {
    id?: string;
    sessionsRemaining?: number;
}

export class CreateCoachScheduleResult implements ICreateCoachScheduleResult {
    id?: string;

    constructor(data?: ICreateCoachScheduleResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateCoachScheduleResult {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCoachScheduleResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateCoachScheduleResult {
    id?: string;
}

export class CreatePackageRequest implements ICreatePackageRequest {
    coachId?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;

    constructor(data?: ICreatePackageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.coachId = _data["coachId"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.sessionCount = _data["sessionCount"];
        }
    }

    static fromJS(data: any): CreatePackageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreatePackageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["coachId"] = this.coachId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["sessionCount"] = this.sessionCount;
        return data;
    }
}

export interface ICreatePackageRequest {
    coachId?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
}

export class GetStatsResponse implements IGetStatsResponse {
    totalStudents?: number;
    totalSessions?: number;
    totalRevenue?: number;
    totalPackage?: number;
    stats?: StatPeriod[] | undefined;

    constructor(data?: IGetStatsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.totalStudents = _data["totalStudents"];
            this.totalSessions = _data["totalSessions"];
            this.totalRevenue = _data["totalRevenue"];
            this.totalPackage = _data["totalPackage"];
            if (Array.isArray(_data["stats"])) {
                this.stats = [] as any;
                for (let item of _data["stats"])
                    this.stats!.push(StatPeriod.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetStatsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetStatsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["totalStudents"] = this.totalStudents;
        data["totalSessions"] = this.totalSessions;
        data["totalRevenue"] = this.totalRevenue;
        data["totalPackage"] = this.totalPackage;
        if (Array.isArray(this.stats)) {
            data["stats"] = [];
            for (let item of this.stats)
                data["stats"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetStatsResponse {
    totalStudents?: number;
    totalSessions?: number;
    totalRevenue?: number;
    totalPackage?: number;
    stats?: StatPeriod[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class PromotionRecord implements IPromotionRecord {
    id?: string;
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;
    packageId?: string | undefined;
    packageName?: string | undefined;
    createdAt?: Date;
    updatedAt?: Date;

    constructor(data?: IPromotionRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.description = _data["description"];
            this.discountType = _data["discountType"];
            this.discountValue = _data["discountValue"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
            this.packageId = _data["packageId"];
            this.packageName = _data["packageName"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PromotionRecord {
        data = typeof data === 'object' ? data : {};
        let result = new PromotionRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["description"] = this.description;
        data["discountType"] = this.discountType;
        data["discountValue"] = this.discountValue;
        data["validFrom"] = this.validFrom ? formatDate(this.validFrom) : <any>undefined;
        data["validTo"] = this.validTo ? formatDate(this.validTo) : <any>undefined;
        data["packageId"] = this.packageId;
        data["packageName"] = this.packageName;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPromotionRecord {
    id?: string;
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;
    packageId?: string | undefined;
    packageName?: string | undefined;
    createdAt?: Date;
    updatedAt?: Date;
}


export class PurchaseDetail implements IPurchaseDetail {
    id?: string;
    coachPackageId?: string;
    purchaseDate?: Date;
    expiryDate?: Date;
    sessionCount?: number;
    sessionUsed?: number;

    constructor(data?: IPurchaseDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.coachPackageId = _data["coachPackageId"];
            this.purchaseDate = _data["purchaseDate"] ? new Date(_data["purchaseDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? new Date(_data["expiryDate"].toString()) : <any>undefined;
            this.sessionCount = _data["sessionCount"];
            this.sessionUsed = _data["sessionUsed"];
        }
    }

    static fromJS(data: any): PurchaseDetail {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coachPackageId"] = this.coachPackageId;
        data["purchaseDate"] = this.purchaseDate ? this.purchaseDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["sessionCount"] = this.sessionCount;
        data["sessionUsed"] = this.sessionUsed;
        return data;
    }
}

export interface IPurchaseDetail {
    id?: string;
    coachPackageId?: string;
    purchaseDate?: Date;
    expiryDate?: Date;
    sessionCount?: number;
    sessionUsed?: number;
}

export class PackageResponse implements IPackageResponse {
    id?: string;
    coachId?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
    status?: string | undefined;
    createdAt?: Date;
    updatedAt?: Date;

    constructor(data?: IPackageResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.coachId = _data["coachId"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.sessionCount = _data["sessionCount"];
            this.status = _data["status"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.updatedAt = _data["updatedAt"] ? new Date(_data["updatedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): PackageResponse {
        data = typeof data === 'object' ? data : {};
        let result = new PackageResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coachId"] = this.coachId;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["sessionCount"] = this.sessionCount;
        data["status"] = this.status;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["updatedAt"] = this.updatedAt ? this.updatedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface IPackageResponse {
    id?: string;
    coachId?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
    status?: string | undefined;
    createdAt?: Date;
    updatedAt?: Date;
}

export class DeletePackageResult implements IDeletePackageResult {
    id?: string;
    status?: string | undefined;
    message?: string | undefined;

    constructor(data?: IDeletePackageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): DeletePackageResult {
        data = typeof data === 'object' ? data : {};
        let result = new DeletePackageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        data["message"] = this.message;
        return data;
    }
}

export interface IDeletePackageResult {
    id?: string;
    status?: string | undefined;
    message?: string | undefined;
}

export class UpdatePackageRequest implements IUpdatePackageRequest {
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
    status?: string | undefined;

    constructor(data?: IUpdatePackageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.sessionCount = _data["sessionCount"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): UpdatePackageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePackageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["sessionCount"] = this.sessionCount;
        data["status"] = this.status;
        return data;
    }
}

export interface IUpdatePackageRequest {
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
    status?: string | undefined;
}

export class UpdatePackageResult implements IUpdatePackageResult {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
    status?: string | undefined;

    constructor(data?: IUpdatePackageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.price = _data["price"];
            this.sessionCount = _data["sessionCount"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): UpdatePackageResult {
        data = typeof data === 'object' ? data : {};
        let result = new UpdatePackageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["price"] = this.price;
        data["sessionCount"] = this.sessionCount;
        data["status"] = this.status;
        return data;
    }
}

export interface IUpdatePackageResult {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    price?: number;
    sessionCount?: number;
    status?: string | undefined;
}

export class UpdateScheduleRequest implements IUpdateScheduleRequest {
    dayOfWeek?: number;
    startTime?: string;
    endTime?: string;

    constructor(data?: IUpdateScheduleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.dayOfWeek = _data["dayOfWeek"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
        }
    }

    static fromJS(data: any): UpdateScheduleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateScheduleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dayOfWeek"] = this.dayOfWeek;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        return data;
    }
}


export class PurchasePackageRequest implements IPurchasePackageRequest {
    packageId?: string;

    constructor(data?: IPurchasePackageRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageId = _data["packageId"];
        }
    }

    static fromJS(data: any): PurchasePackageRequest {
        data = typeof data === 'object' ? data : {};
        let result = new PurchasePackageRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageId"] = this.packageId;
        return data;
    }
}

export interface IPurchasePackageRequest {
    packageId?: string;
}

export class PurchasePackageResult implements IPurchasePackageResult {
    id?: string;
    coachPackageId?: string;
    purchaseDate?: Date;
    expiryDate?: Date;
    sessionCount?: number;
    sessionUsed?: number;

    constructor(data?: IPurchasePackageResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.coachPackageId = _data["coachPackageId"];
            this.purchaseDate = _data["purchaseDate"] ? new Date(_data["purchaseDate"].toString()) : <any>undefined;
            this.expiryDate = _data["expiryDate"] ? new Date(_data["expiryDate"].toString()) : <any>undefined;
            this.sessionCount = _data["sessionCount"];
            this.sessionUsed = _data["sessionUsed"];
        }
    }

    static fromJS(data: any): PurchasePackageResult {
        data = typeof data === 'object' ? data : {};
        let result = new PurchasePackageResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coachPackageId"] = this.coachPackageId;
        data["purchaseDate"] = this.purchaseDate ? this.purchaseDate.toISOString() : <any>undefined;
        data["expiryDate"] = this.expiryDate ? this.expiryDate.toISOString() : <any>undefined;
        data["sessionCount"] = this.sessionCount;
        data["sessionUsed"] = this.sessionUsed;
        return data;
    }
}

export interface IPurchasePackageResult {
    id?: string;
    coachPackageId?: string;
    purchaseDate?: Date;
    expiryDate?: Date;
    sessionCount?: number;
    sessionUsed?: number;
}

export class PurchaseRecord implements IPurchaseRecord {
    id?: string;
    coachPackageId?: string;
    sessionCount?: number;
    sessionUsed?: number;

    constructor(data?: IPurchaseRecord) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.coachPackageId = _data["coachPackageId"];
            this.sessionCount = _data["sessionCount"];
            this.sessionUsed = _data["sessionUsed"];
        }
    }

    static fromJS(data: any): PurchaseRecord {
        data = typeof data === 'object' ? data : {};
        let result = new PurchaseRecord();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coachPackageId"] = this.coachPackageId;
        data["sessionCount"] = this.sessionCount;
        data["sessionUsed"] = this.sessionUsed;
        return data;
    }
}

export interface IPurchaseRecord {
    id?: string;
    coachPackageId?: string;
    sessionCount?: number;
    sessionUsed?: number;
}

export class UserBookingHistoryResult implements IUserBookingHistoryResult {
    id?: string;
    coachId?: string;
    coachName?: string | undefined;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;
    sportId?: string;
    packageName?: string | undefined;

    constructor(data?: IUserBookingHistoryResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.coachId = _data["coachId"];
            this.coachName = _data["coachName"];
            this.bookingDate = _data["bookingDate"] ? new Date(_data["bookingDate"].toString()) : <any>undefined;
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.status = _data["status"];
            this.totalPrice = _data["totalPrice"];
            this.sportId = _data["sportId"];
            this.packageName = _data["packageName"];
        }
    }

    static fromJS(data: any): UserBookingHistoryResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserBookingHistoryResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["coachId"] = this.coachId;
        data["coachName"] = this.coachName;
        data["bookingDate"] = this.bookingDate ? formatDate(this.bookingDate) : <any>undefined;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["status"] = this.status;
        data["totalPrice"] = this.totalPrice;
        data["sportId"] = this.sportId;
        data["packageName"] = this.packageName;
        return data;
    }
}

export interface IUserBookingHistoryResult {
    id?: string;
    coachId?: string;
    coachName?: string | undefined;
    bookingDate?: Date;
    startTime?: string;
    endTime?: string;
    status?: string | undefined;
    totalPrice?: number;
    sportId?: string;
    packageName?: string | undefined;
}


export class UserBookingHistoryResultPaginatedResult implements IUserBookingHistoryResultPaginatedResult {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: UserBookingHistoryResult[] | undefined;

    constructor(data?: IUserBookingHistoryResultPaginatedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.count = _data["count"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(UserBookingHistoryResult.fromJS(item));
            }
        }
    }

    static fromJS(data: any): UserBookingHistoryResultPaginatedResult {
        data = typeof data === 'object' ? data : {};
        let result = new UserBookingHistoryResultPaginatedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["count"] = this.count;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface IUserBookingHistoryResultPaginatedResult {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: UserBookingHistoryResult[] | undefined;
}

export class ScheduleSlotResponse implements IScheduleSlotResponse {
    date?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    status?: string | undefined;

    constructor(data?: IScheduleSlotResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): ScheduleSlotResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ScheduleSlotResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["status"] = this.status;
        return data;
    }
}

export interface IScheduleSlotResponse {
    date?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    status?: string | undefined;
}

export class StatPeriod implements IStatPeriod {
    period?: string | undefined;
    sessions?: number;
    revenue?: number;

    constructor(data?: IStatPeriod) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.period = _data["period"];
            this.sessions = _data["sessions"];
            this.revenue = _data["revenue"];
        }
    }

    static fromJS(data: any): StatPeriod {
        data = typeof data === 'object' ? data : {};
        let result = new StatPeriod();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["period"] = this.period;
        data["sessions"] = this.sessions;
        data["revenue"] = this.revenue;
        return data;
    }
}

export interface IStatPeriod {
    period?: string | undefined;
    sessions?: number;
    revenue?: number;
}

export class UpdateCoachPromotionRequest implements IUpdateCoachPromotionRequest {
    packageId?: string | undefined;
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;

    constructor(data?: IUpdateCoachPromotionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.packageId = _data["packageId"];
            this.description = _data["description"];
            this.discountType = _data["discountType"];
            this.discountValue = _data["discountValue"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateCoachPromotionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCoachPromotionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["packageId"] = this.packageId;
        data["description"] = this.description;
        data["discountType"] = this.discountType;
        data["discountValue"] = this.discountValue;
        data["validFrom"] = this.validFrom ? formatDate(this.validFrom) : <any>undefined;
        data["validTo"] = this.validTo ? formatDate(this.validTo) : <any>undefined;
        return data;
    }
}

export interface IUpdateCoachPromotionRequest {
    packageId?: string | undefined;
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;
}

export class UpdateCoachRequest implements IUpdateCoachRequest {
    fullName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    bio?: string | undefined;
    ratePerHour?: number;
    listSport?: string[] | undefined;
    newAvatar?: string | undefined;
    newImages?: string[] | undefined;
    existingImageUrls?: string[] | undefined;
    imagesToDelete?: string[] | undefined;

    constructor(data?: IUpdateCoachRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.fullName = _data["fullName"];
            this.email = _data["email"];
            this.phone = _data["phone"];
            this.bio = _data["bio"];
            this.ratePerHour = _data["ratePerHour"];
            if (Array.isArray(_data["listSport"])) {
                this.listSport = [] as any;
                for (let item of _data["listSport"])
                    this.listSport!.push(item);
            }
            this.newAvatar = _data["newAvatar"];
            if (Array.isArray(_data["newImages"])) {
                this.newImages = [] as any;
                for (let item of _data["newImages"])
                    this.newImages!.push(item);
            }
            if (Array.isArray(_data["existingImageUrls"])) {
                this.existingImageUrls = [] as any;
                for (let item of _data["existingImageUrls"])
                    this.existingImageUrls!.push(item);
            }
            if (Array.isArray(_data["imagesToDelete"])) {
                this.imagesToDelete = [] as any;
                for (let item of _data["imagesToDelete"])
                    this.imagesToDelete!.push(item);
            }
        }
    }

    static fromJS(data: any): UpdateCoachRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCoachRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["fullName"] = this.fullName;
        data["email"] = this.email;
        data["phone"] = this.phone;
        data["bio"] = this.bio;
        data["ratePerHour"] = this.ratePerHour;
        if (Array.isArray(this.listSport)) {
            data["listSport"] = [];
            for (let item of this.listSport)
                data["listSport"].push(item);
        }
        data["newAvatar"] = this.newAvatar;
        if (Array.isArray(this.newImages)) {
            data["newImages"] = [];
            for (let item of this.newImages)
                data["newImages"].push(item);
        }
        if (Array.isArray(this.existingImageUrls)) {
            data["existingImageUrls"] = [];
            for (let item of this.existingImageUrls)
                data["existingImageUrls"].push(item);
        }
        if (Array.isArray(this.imagesToDelete)) {
            data["imagesToDelete"] = [];
            for (let item of this.imagesToDelete)
                data["imagesToDelete"].push(item);
        }
        return data;
    }
}

export interface IUpdateCoachRequest {
    fullName?: string | undefined;
    email?: string | undefined;
    phone?: string | undefined;
    bio?: string | undefined;
    ratePerHour?: number;
    listSport?: string[] | undefined;
    newAvatar?: string | undefined;
    newImages?: string[] | undefined;
    existingImageUrls?: string[] | undefined;
    imagesToDelete?: string[] | undefined;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}