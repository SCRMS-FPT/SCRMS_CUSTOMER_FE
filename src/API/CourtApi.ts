//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

import { API_COURT_BOOKING_URL } from "./config";

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? API_COURT_BOOKING_URL;
    }
    private getAuthHeaders(): HeadersInit {
        // Get token from localStorage (which is synced with Redux store)
        const token = localStorage.getItem("token");
        
        // Return headers with Authorization if token exists
        return token ? {
            "Authorization": `Bearer ${token}`,
            "Accept": "application/json"
        } : {
            "Accept": "application/json"
        };
    }
    /**
     * Thống kê sân và doanh thu
     * @param start_date (optional) 
     * @param end_date (optional) 
     * @return OK
     */
    getCourtStats(start_date: Date | undefined, end_date: Date | undefined): Promise<GetCourtStatsResponse> {
        let url_ = this.baseUrl + "/api/admin/court-stats?";
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent(start_date ? "" + start_date.toISOString() : "") + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent(end_date ? "" + end_date.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders(), // Add auth headers
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCourtStats(_response);
        });
    }

    protected processGetCourtStats(response: Response): Promise<GetCourtStatsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCourtStatsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCourtStatsResponse>(null as any);
    }

    /**
     * Tạo đặt sân mới
     * @return Created
     */
    createBooking(body: CreateBookingRequest): Promise<CreateBookingResponse> {
        let url_ = this.baseUrl + "/api/bookings";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(), // Add auth headers
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateBooking(_response);
        });
    }

    protected processCreateBooking(response: Response): Promise<CreateBookingResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateBookingResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateBookingResponse>(null as any);
    }

    /**
     * Get Bookings
     * @param user_id (optional) 
     * @param court_id (optional) 
     * @param sports_center_id (optional) 
     * @param status (optional) 
     * @param start_date (optional) 
     * @param end_date (optional) 
     * @param page (optional) 
     * @param limit (optional) 
     * @return OK
     */
    getBookings(user_id: string | undefined, court_id: string | undefined, sports_center_id: string | undefined, status: BookingStatus | undefined, start_date: Date | undefined, end_date: Date | undefined, page: number | undefined, limit: number | undefined): Promise<GetBookingsResult> {
        let url_ = this.baseUrl + "/api/bookings?";
        if (user_id === null)
            throw new Error("The parameter 'user_id' cannot be null.");
        else if (user_id !== undefined)
            url_ += "user_id=" + encodeURIComponent("" + user_id) + "&";
        if (court_id === null)
            throw new Error("The parameter 'court_id' cannot be null.");
        else if (court_id !== undefined)
            url_ += "court_id=" + encodeURIComponent("" + court_id) + "&";
        if (sports_center_id === null)
            throw new Error("The parameter 'sports_center_id' cannot be null.");
        else if (sports_center_id !== undefined)
            url_ += "sports_center_id=" + encodeURIComponent("" + sports_center_id) + "&";
        if (status === null)
            throw new Error("The parameter 'status' cannot be null.");
        else if (status !== undefined)
            url_ += "status=" + encodeURIComponent("" + status) + "&";
        if (start_date === null)
            throw new Error("The parameter 'start_date' cannot be null.");
        else if (start_date !== undefined)
            url_ += "start_date=" + encodeURIComponent(start_date ? "" + start_date.toISOString() : "") + "&";
        if (end_date === null)
            throw new Error("The parameter 'end_date' cannot be null.");
        else if (end_date !== undefined)
            url_ += "end_date=" + encodeURIComponent(end_date ? "" + end_date.toISOString() : "") + "&";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: this.getAuthHeaders(), // Add auth headers
               
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBookings(_response);
        });
    }

    protected processGetBookings(response: Response): Promise<GetBookingsResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetBookingsResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetBookingsResult>(null as any);
    }

     /**
     * Update Booking Status
     * @return OK
     */
     updateBookingStatus(bookingId: string, body: UpdateBookingStatusRequest): Promise<UpdateBookingStatusResponse> {
        let url_ = this.baseUrl + "/api/bookings/bookings/{bookingId}/status";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined.");
        url_ = url_.replace("{bookingId}", encodeURIComponent("" + bookingId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(), // Add auth headers
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBookingStatus(_response);
        });
    }

    protected processUpdateBookingStatus(response: Response): Promise<UpdateBookingStatusResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateBookingStatusResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdateBookingStatusResponse>(null as any);
    }

    /**
     * Update Booking Note
     * @return OK
     */
    updateBookingNote(bookingId: string, body: UpdateBookingNoteRequest): Promise<UpdateBookingNoteResponse> {
        let url_ = this.baseUrl + "/api/bookings/bookings/{bookingId}/note";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined.");
        url_ = url_.replace("{bookingId}", encodeURIComponent("" + bookingId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(), 
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateBookingNote(_response);
        });
    }

    protected processUpdateBookingNote(response: Response): Promise<UpdateBookingNoteResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateBookingNoteResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdateBookingNoteResponse>(null as any);
    }

/**
     * Get Sport Centers by Owner
     * @param page (optional) 
     * @param limit (optional) 
     * @param city (optional) 
     * @param name (optional) 
     * @param sportId (optional) 
     * @param bookingDate (optional) 
     * @param startTime (optional) 
     * @param endTime (optional) 
     * @return OK
     */
getOwnedSportCenters(page: number | undefined, limit: number | undefined, city: string | undefined, name: string | undefined, sportId: string | undefined, bookingDate: Date | undefined, startTime: string | undefined, endTime: string | undefined): Promise<GetOwnedSportCentersResponse> {
    let url_ = this.baseUrl + "/api/sportcenters/owned?";
    if (page === null)
        throw new Error("The parameter 'page' cannot be null.");
    else if (page !== undefined)
        url_ += "page=" + encodeURIComponent("" + page) + "&";
    if (limit === null)
        throw new Error("The parameter 'limit' cannot be null.");
    else if (limit !== undefined)
        url_ += "limit=" + encodeURIComponent("" + limit) + "&";
    if (city === null)
        throw new Error("The parameter 'city' cannot be null.");
    else if (city !== undefined)
        url_ += "city=" + encodeURIComponent("" + city) + "&";
    if (name === null)
        throw new Error("The parameter 'name' cannot be null.");
    else if (name !== undefined)
        url_ += "name=" + encodeURIComponent("" + name) + "&";
    if (sportId === null)
        throw new Error("The parameter 'sportId' cannot be null.");
    else if (sportId !== undefined)
        url_ += "SportId=" + encodeURIComponent("" + sportId) + "&";
    if (bookingDate === null)
        throw new Error("The parameter 'bookingDate' cannot be null.");
    else if (bookingDate !== undefined)
        url_ += "BookingDate=" + encodeURIComponent(bookingDate ? "" + bookingDate.toISOString() : "") + "&";
    if (startTime === null)
        throw new Error("The parameter 'startTime' cannot be null.");
    else if (startTime !== undefined)
        url_ += "StartTime=" + encodeURIComponent("" + startTime) + "&";
    if (endTime === null)
        throw new Error("The parameter 'endTime' cannot be null.");
    else if (endTime !== undefined)
        url_ += "EndTime=" + encodeURIComponent("" + endTime) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: this.getAuthHeaders(),
        credentials: 'include'
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetOwnedSportCenters(_response);
    });
}

protected processGetOwnedSportCenters(response: Response): Promise<GetOwnedSportCentersResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetOwnedSportCentersResponse.fromJS(resultData200);
        return result200;
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status === 403) {
        return response.text().then((_responseText) => {
        let result403: any = null;
        let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result403 = ProblemDetails.fromJS(resultData403);
        return throwException("Forbidden", status, _responseText, _headers, result403);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<GetOwnedSportCentersResponse>(null as any);
}


    /**
     * Get Booking By Id
     * @return OK
     */
    getBookingById(bookingId: string): Promise<BookingDto> {
        let url_ = this.baseUrl + "/api/bookings/{bookingId}";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined.");
        url_ = url_.replace("{bookingId}", encodeURIComponent("" + bookingId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetBookingById(_response);
        });
    }

    protected processGetBookingById(response: Response): Promise<BookingDto> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BookingDto.fromJS(resultData200);
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<BookingDto>(null as any);
    }

    /**
     * Cancel a booking
     * @return OK
     */
    cancelBooking(bookingId: string, body: CancelBookingRequest): Promise<CancelBookingResult> {
        let url_ = this.baseUrl + "/api/bookings/{bookingId}/cancel";
        if (bookingId === undefined || bookingId === null)
            throw new Error("The parameter 'bookingId' must be defined.");
        url_ = url_.replace("{bookingId}", encodeURIComponent("" + bookingId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCancelBooking(_response);
        });
    }

    protected processCancelBooking(response: Response): Promise<CancelBookingResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CancelBookingResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CancelBookingResult>(null as any);
    }

    /**
     * Tạo sân mới
     * @return Created
     */
    createCourt(body: CreateCourtRequest): Promise<CreateCourtResponse> {
        let url_ = this.baseUrl + "/api/courts";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCourt(_response);
        });
    }

    protected processCreateCourt(response: Response): Promise<CreateCourtResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateCourtResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateCourtResponse>(null as any);
    }

    /**
     * Lấy danh sách sân
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @param sportCenterId (optional) 
     * @param sportId (optional) 
     * @param courtType (optional) 
     * @return OK
     */
    getCourts(pageIndex: number | undefined, pageSize: number | undefined, sportCenterId: string | undefined, sportId: string | undefined, courtType: string | undefined): Promise<GetCourtsResponse> {
        let url_ = this.baseUrl + "/api/courts?";
        if (pageIndex === null)
            throw new Error("The parameter 'pageIndex' cannot be null.");
        else if (pageIndex !== undefined)
            url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
        if (pageSize === null)
            throw new Error("The parameter 'pageSize' cannot be null.");
        else if (pageSize !== undefined)
            url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
        if (sportCenterId === null)
            throw new Error("The parameter 'sportCenterId' cannot be null.");
        else if (sportCenterId !== undefined)
            url_ += "sportCenterId=" + encodeURIComponent("" + sportCenterId) + "&";
        if (sportId === null)
            throw new Error("The parameter 'sportId' cannot be null.");
        else if (sportId !== undefined)
            url_ += "sportId=" + encodeURIComponent("" + sportId) + "&";
        if (courtType === null)
            throw new Error("The parameter 'courtType' cannot be null.");
        else if (courtType !== undefined)
            url_ += "courtType=" + encodeURIComponent("" + courtType) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCourts(_response);
        });
    }

    protected processGetCourts(response: Response): Promise<GetCourtsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCourtsResponse>(null as any);
    }
 /**
     * Tính toán giá đặt sân
     * @return OK
     */
 calculateBookingPrice(body: CalculateBookingPriceRequest): Promise<CalculateBookingPriceResponse> {
    let url_ = this.baseUrl + "/api/bookings/calculate";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(body);

    let options_: RequestInit = {
        body: content_,
        method: "POST",
        headers: {
            ...this.getAuthHeaders(), // Add auth headers
            "Content-Type": "application/json",
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processCalculateBookingPrice(_response);
    });
}

protected processCalculateBookingPrice(response: Response): Promise<CalculateBookingPriceResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = CalculateBookingPriceResponse.fromJS(resultData200);
        return result200;
        });
    } else if (status === 400) {
        return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<CalculateBookingPriceResponse>(null as any);
}

    /**
     * Lấy chi tiết sân
     * @return OK
     */
    getCourtDetails(id: string): Promise<GetCourtDetailsResponse> {
        let url_ = this.baseUrl + "/api/courts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCourtDetails(_response);
        });
    }

    protected processGetCourtDetails(response: Response): Promise<GetCourtDetailsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCourtDetailsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCourtDetailsResponse>(null as any);
    }

    /**
     * Cập nhật sân
     * @return OK
     */
    updateCourt(id: string, body: UpdateCourtRequest): Promise<UpdateCourtResponse> {
        let url_ = this.baseUrl + "/api/courts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCourt(_response);
        });
    }

    protected processUpdateCourt(response: Response): Promise<UpdateCourtResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateCourtResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdateCourtResponse>(null as any);
    }

    /**
     * Xóa sân
     * @return OK
     */
    deleteCourt(id: string): Promise<DeleteCourtResponse> {
        let url_ = this.baseUrl + "/api/courts/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCourt(_response);
        });
    }

    protected processDeleteCourt(response: Response): Promise<DeleteCourtResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteCourtResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DeleteCourtResponse>(null as any);
    }

    /**
     * Lấy lịch khả dụng của sân
     * @return OK
     */
    getCourtAvailability(id: string, startDate: Date, endDate: Date): Promise<GetCourtAvailabilityResult> {
        let url_ = this.baseUrl + "/api/courts/{id}/availability?";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        if (startDate === undefined || startDate === null)
            throw new Error("The parameter 'startDate' must be defined and cannot be null.");
        else
            url_ += "startDate=" + encodeURIComponent(startDate ? "" + startDate.toISOString() : "") + "&";
        if (endDate === undefined || endDate === null)
            throw new Error("The parameter 'endDate' must be defined and cannot be null.");
        else
            url_ += "endDate=" + encodeURIComponent(endDate ? "" + endDate.toISOString() : "") + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCourtAvailability(_response);
        });
    }

    protected processGetCourtAvailability(response: Response): Promise<GetCourtAvailabilityResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetCourtAvailabilityResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetCourtAvailabilityResult>(null as any);
    }

    /**
     * Lấy danh sách khuyến mãi của sân
     * @return OK
     */
    getCourtPromotions(courtId: string): Promise<CourtPromotionDTO[]> {
        let url_ = this.baseUrl + "/api/courts/promotions/{courtId}/promotions";
        if (courtId === undefined || courtId === null)
            throw new Error("The parameter 'courtId' must be defined.");
        url_ = url_.replace("{courtId}", encodeURIComponent("" + courtId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCourtPromotions(_response);
        });
    }

    protected processGetCourtPromotions(response: Response): Promise<CourtPromotionDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CourtPromotionDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 401) {
            return response.text().then((_responseText) => {
            let result401: any = null;
            let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result401 = ProblemDetails.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CourtPromotionDTO[]>(null as any);
    }

    /**
     * Tạo khuyến mãi mới cho sân
     * @return Created
     */
    createCourtPromotion(courtId: string, body: CreateCourtPromotionRequest): Promise<CourtPromotionDTO> {
        let url_ = this.baseUrl + "/api/courts/promotions/{courtId}/promotions";
        if (courtId === undefined || courtId === null)
            throw new Error("The parameter 'courtId' must be defined.");
        url_ = url_.replace("{courtId}", encodeURIComponent("" + courtId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCourtPromotion(_response);
        });
    }

    protected processCreateCourtPromotion(response: Response): Promise<CourtPromotionDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CourtPromotionDTO.fromJS(resultData201);
            return result201;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CourtPromotionDTO>(null as any);
    }

    /**
     * Cập nhật khuyến mãi
     * @return OK
     */
    updateCourtPromotion(promotionId: string, body: UpdateCourtPromotionRequest): Promise<CourtPromotionDTO> {
        let url_ = this.baseUrl + "/api/courts/promotions/{promotionId}";
        if (promotionId === undefined || promotionId === null)
            throw new Error("The parameter 'promotionId' must be defined.");
        url_ = url_.replace("{promotionId}", encodeURIComponent("" + promotionId));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCourtPromotion(_response);
        });
    }

    protected processUpdateCourtPromotion(response: Response): Promise<CourtPromotionDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = CourtPromotionDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CourtPromotionDTO>(null as any);
    }

    /**
     * Xóa khuyến mãi
     * @return OK
     */
    deleteCourtPromotion(promotionId: string): Promise<void> {
        let url_ = this.baseUrl + "/api/courts/promotions/{promotionId}";
        if (promotionId === undefined || promotionId === null)
            throw new Error("The parameter 'promotionId' must be defined.");
        url_ = url_.replace("{promotionId}", encodeURIComponent("" + promotionId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                ...this.getAuthHeaders(),
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCourtPromotion(_response);
        });
    }

    protected processDeleteCourtPromotion(response: Response): Promise<void> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            return;
            });
        } else if (status === 403) {
            return response.text().then((_responseText) => {
            let result403: any = null;
            let resultData403 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result403 = ProblemDetails.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<void>(null as any);
    }

    /**
     * Create Court Schedule
     * @return Created
     */
    createCourtSchedule(body: CreateCourtScheduleCommand): Promise<CreateCourtScheduleResponse> {
        let url_ = this.baseUrl + "/api/courtschedules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateCourtSchedule(_response);
        });
    }

    protected processCreateCourtSchedule(response: Response): Promise<CreateCourtScheduleResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateCourtScheduleResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateCourtScheduleResponse>(null as any);
    }

    /**
     * Update Court Schedule
     * @return OK
     */
    updateCourtSchedule(body: UpdateCourtScheduleRequest): Promise<UpdateCourtScheduleResponse> {
        let url_ = this.baseUrl + "/api/courtschedules";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateCourtSchedule(_response);
        });
    }

    protected processUpdateCourtSchedule(response: Response): Promise<UpdateCourtScheduleResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateCourtScheduleResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdateCourtScheduleResponse>(null as any);
    }

    /**
     * Get Court Schedules
     * @param day (optional) 
     * @return OK
     */
    getCourtSchedulesByCourtId(courtId: string, day: number | undefined): Promise<CourtScheduleDTO[]> {
        let url_ = this.baseUrl + "/api/courtschedules/{courtId}/schedules?";
        if (courtId === undefined || courtId === null)
            throw new Error("The parameter 'courtId' must be defined.");
        url_ = url_.replace("{courtId}", encodeURIComponent("" + courtId));
        if (day === null)
            throw new Error("The parameter 'day' cannot be null.");
        else if (day !== undefined)
            url_ += "day=" + encodeURIComponent("" + day) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetCourtSchedulesByCourtId(_response);
        });
    }

    protected processGetCourtSchedulesByCourtId(response: Response): Promise<CourtScheduleDTO[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(CourtScheduleDTO.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CourtScheduleDTO[]>(null as any);
    }

    /**
     * Delete Court Schedule
     * @return OK
     */
    deleteCourtSchedule(id: string): Promise<DeleteCourtScheduleResponse> {
        let url_ = this.baseUrl + "/api/courtschedules/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteCourtSchedule(_response);
        });
    }

    protected processDeleteCourtSchedule(response: Response): Promise<DeleteCourtScheduleResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteCourtScheduleResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DeleteCourtScheduleResponse>(null as any);
    }

    /**
     * Create Sport
     * @return Created
     */
    createSport(body: CreateSportRequest): Promise<CreateSportResponse> {
        let url_ = this.baseUrl + "/api/sports";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateSport(_response);
        });
    }

    protected processCreateSport(response: Response): Promise<CreateSportResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateSportResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateSportResponse>(null as any);
    }

    /**
     * Get Sports
     * @return OK
     */
    getSports(): Promise<GetSportsResponse> {
        let url_ = this.baseUrl + "/api/sports";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json",
                credentials: 'include'
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSports(_response);
        });
    }

    protected processGetSports(response: Response): Promise<GetSportsResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetSportsResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetSportsResponse>(null as any);
    }

    /**
     * Update Sport
     * @return OK
     */
    updateSport(body: UpdateSportRequest): Promise<UpdateSportResponse> {
        let url_ = this.baseUrl + "/api/sports";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                ...this.getAuthHeaders(),
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateSport(_response);
        });
    }

    protected processUpdateSport(response: Response): Promise<UpdateSportResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = UpdateSportResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<UpdateSportResponse>(null as any);
    }

    /**
     * Lấy thông tin chi tiết môn thể thao
     * @return OK
     */
    getSportById(sportId: string): Promise<SportDTO> {
        let url_ = this.baseUrl + "/api/sports/{sportId}";
        if (sportId === undefined || sportId === null)
            throw new Error("The parameter 'sportId' must be defined.");
        url_ = url_.replace("{sportId}", encodeURIComponent("" + sportId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSportById(_response);
        });
    }

    protected processGetSportById(response: Response): Promise<SportDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = SportDTO.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SportDTO>(null as any);
    }

    /**
     * Delete Sport
     * @return OK
     */
    deleteSport(id: string): Promise<DeleteSportResponse> {
        let url_ = this.baseUrl + "/api/sports/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteSport(_response);
        });
    }

    protected processDeleteSport(response: Response): Promise<DeleteSportResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = DeleteSportResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<DeleteSportResponse>(null as any);
    }

    /**
     * Create Sport Center
     * @return Created
     */
    createSportCenter(model: CreateSportCenterFormModel | undefined): Promise<CreateSportCenterResponse> {
        let url_ = this.baseUrl + "/api/sportcenters";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = new FormData();
        if (model === null || model === undefined)
            throw new Error("The parameter 'model' cannot be null.");
        else {
            // Validate required fields
            if (!model.name) throw new Error("Name is required");
            if (!model.phoneNumber) throw new Error("PhoneNumber is required");

            // Append each field individually
            content_.append("Name", model.name);
            content_.append("PhoneNumber", model.phoneNumber);
            if (model.addressLine) content_.append("AddressLine", model.addressLine);
            if (model.city) content_.append("City", model.city);
            if (model.district) content_.append("District", model.district);
            if (model.commune) content_.append("Commune", model.commune);
            if (model.latitude !== undefined) content_.append("Latitude", model.latitude.toString());
            if (model.longitude !== undefined) content_.append("Longitude", model.longitude.toString());
            if (model.description) content_.append("Description", model.description);
            
            // Handle files correctly
            if (model.avatarImage) content_.append("AvatarImage", model.avatarImage);
            
            // Append each gallery image separately
            if (model.galleryImages && model.galleryImages.length) {
                model.galleryImages.forEach(image => {
                    content_.append("GalleryImages", image);
                });
            }
        }
        
        // const xsrfToken = (() => {
        //     const match = document.cookie.match('(^|;)\\s*XSRF-TOKEN\\s*=\\s*([^;]+)');
        //     if (!match) throw new Error("CSRF token not found");
        //     return decodeURIComponent(match[2]);
        // })();

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json",
                // "X-XSRF-TOKEN": xsrfToken // ✅ Đảm bảo token luôn có giá trị
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateSportCenter(_response);
        });
    }

    protected processCreateSportCenter(response: Response): Promise<CreateSportCenterResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreateSportCenterResponse.fromJS(resultData201);
            return result201;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreateSportCenterResponse>(null as any);
    }


    /**
     * Get Sport Centers
     * @param page (optional) 
     * @param limit (optional) 
     * @param city (optional) 
     * @param name (optional) 
     * @param sportId (optional) 
     * @param bookingDate (optional) 
     * @param startTime (optional) 
     * @param endTime (optional) 
     * @return OK
     */
    getSportCenters(page: number | undefined, limit: number | undefined, city: string | undefined, name: string | undefined, sportId: string | undefined, bookingDate: Date | undefined, startTime: string | undefined, endTime: string | undefined): Promise<GetSportCentersResponse> {
        let url_ = this.baseUrl + "/api/sportcenters?";
        if (page === null)
            throw new Error("The parameter 'page' cannot be null.");
        else if (page !== undefined)
            url_ += "page=" + encodeURIComponent("" + page) + "&";
        if (limit === null)
            throw new Error("The parameter 'limit' cannot be null.");
        else if (limit !== undefined)
            url_ += "limit=" + encodeURIComponent("" + limit) + "&";
        if (city === null)
            throw new Error("The parameter 'city' cannot be null.");
        else if (city !== undefined)
            url_ += "city=" + encodeURIComponent("" + city) + "&";
        if (name === null)
            throw new Error("The parameter 'name' cannot be null.");
        else if (name !== undefined)
            url_ += "name=" + encodeURIComponent("" + name) + "&";
        if (sportId === null)
            throw new Error("The parameter 'sportId' cannot be null.");
        else if (sportId !== undefined)
            url_ += "SportId=" + encodeURIComponent("" + sportId) + "&";
        if (bookingDate === null)
            throw new Error("The parameter 'bookingDate' cannot be null.");
        else if (bookingDate !== undefined)
            url_ += "BookingDate=" + encodeURIComponent(bookingDate ? "" + bookingDate.toISOString() : "") + "&";
        if (startTime === null)
            throw new Error("The parameter 'startTime' cannot be null.");
        else if (startTime !== undefined)
            url_ += "StartTime=" + encodeURIComponent("" + startTime) + "&";
        if (endTime === null)
            throw new Error("The parameter 'endTime' cannot be null.");
        else if (endTime !== undefined)
            url_ += "EndTime=" + encodeURIComponent("" + endTime) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSportCenters(_response);
        });
    }

    protected processGetSportCenters(response: Response): Promise<GetSportCentersResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetSportCentersResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetSportCentersResponse>(null as any);
    }


    /**
     * Lấy tất cả sân của một trung tâm
     * @return OK
     */
    getAllCourtsOfSportCenter(id: string): Promise<GetAllCourtsOfSportCenterResponse> {
        let url_ = this.baseUrl + "/api/sportcenters/{id}/courts";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetAllCourtsOfSportCenter(_response);
        });
    }

    protected processGetAllCourtsOfSportCenter(response: Response): Promise<GetAllCourtsOfSportCenterResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GetAllCourtsOfSportCenterResponse.fromJS(resultData200);
            return result200;
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            let result400: any = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result400 = ProblemDetails.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<GetAllCourtsOfSportCenterResponse>(null as any);
    }

    /**
     * Update Sport Center
     * @return OK
     */
 /**
     * Update Sport Center with Images
     * @param model (optional) 
     * @return OK
     */
 updateSportCenter(centerId: string, model: UpdateSportCenterFormModel): Promise<SportCenterDetailDTO> {
    let url_ = this.baseUrl + "/api/sportcenters/{centerId}";
    if (centerId === undefined || centerId === null)
        throw new Error("The parameter 'centerId' must be defined.");
    
    url_ = url_.replace("{centerId}", encodeURIComponent("" + centerId));
    url_ = url_.replace(/[?&]$/, "");

    if (model === null || model === undefined)
        throw new Error("The parameter 'model' cannot be null.");

    let options_: RequestInit = {
        body: model,
        method: "PUT",
        headers: {
            ...this.getAuthHeaders(),
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processUpdateSportCenter(_response);
    });
}

/**
     * Lấy danh sách sân thuộc sở hữu của chủ sân
     * @param pageIndex (optional) 
     * @param pageSize (optional) 
     * @param sportId (optional) 
     * @param courtType (optional) 
     * @return OK
     */
getCourtsByOwner(pageIndex: number | undefined, pageSize: number | undefined, sportId: string | undefined, courtType: string | undefined): Promise<GetCourtsByOwnerResponse> {
    let url_ = this.baseUrl + "/api/courts/owner-courts?";
    if (pageIndex === null)
        throw new Error("The parameter 'pageIndex' cannot be null.");
    else if (pageIndex !== undefined)
        url_ += "PageIndex=" + encodeURIComponent("" + pageIndex) + "&";
    if (pageSize === null)
        throw new Error("The parameter 'pageSize' cannot be null.");
    else if (pageSize !== undefined)
        url_ += "PageSize=" + encodeURIComponent("" + pageSize) + "&";
    if (sportId === null)
        throw new Error("The parameter 'sportId' cannot be null.");
    else if (sportId !== undefined)
        url_ += "sportId=" + encodeURIComponent("" + sportId) + "&";
    if (courtType === null)
        throw new Error("The parameter 'courtType' cannot be null.");
    else if (courtType !== undefined)
        url_ += "courtType=" + encodeURIComponent("" + courtType) + "&";
    url_ = url_.replace(/[?&]$/, "");

    let options_: RequestInit = {
        method: "GET",
        headers: {
            ...this.getAuthHeaders(),
            "Accept": "application/json"
        }
    };

    return this.http.fetch(url_, options_).then((_response: Response) => {
        return this.processGetCourtsByOwner(_response);
    });
}

protected processGetCourtsByOwner(response: Response): Promise<GetCourtsByOwnerResponse> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = GetCourtsByOwnerResponse.fromJS(resultData200);
        return result200;
        });
    } else if (status === 400) {
        return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
        });
    } else if (status === 401) {
        return response.text().then((_responseText) => {
        let result401: any = null;
        let resultData401 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result401 = ProblemDetails.fromJS(resultData401);
        return throwException("Unauthorized", status, _responseText, _headers, result401);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<GetCourtsByOwnerResponse>(null as any);
}


protected processUpdateSportCenter(response: Response): Promise<SportCenterDetailDTO> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
        return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = SportCenterDetailDTO.fromJS(resultData200);
        return result200;
        });
    } else if (status === 400) {
        return response.text().then((_responseText) => {
        let result400: any = null;
        let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result400 = ProblemDetails.fromJS(resultData400);
        return throwException("Bad Request", status, _responseText, _headers, result400);
        });
    } else if (status === 404) {
        return response.text().then((_responseText) => {
        let result404: any = null;
        let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result404 = ProblemDetails.fromJS(resultData404);
        return throwException("Not Found", status, _responseText, _headers, result404);
        });
    } else if (status !== 200 && status !== 204) {
        return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        });
    }
    return Promise.resolve<SportCenterDetailDTO>(null as any);
}



    /**
     * Get Sport Center By ID
     * @return OK
     */
    getSportCenterById(id: string): Promise<SportCenterListDTO> {
        let url_ = this.baseUrl + "/api/sportcenters/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                ...this.getAuthHeaders(),
                "Accept": "application/json"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetSportCenterById(_response);
        });
    }

    protected processGetSportCenterById(response: Response): Promise<SportCenterListDTO> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.json();
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SportCenterListDTO>(null as any);
    }
}

export class BookingCreateDTO implements IBookingCreateDTO {
    bookingDate?: Date;
    note?: string | undefined;
    depositAmount?: number;
    bookingDetails?: BookingDetailCreateDTO[] | undefined;

    constructor(data?: IBookingCreateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bookingDate = _data["bookingDate"] ? new Date(_data["bookingDate"].toString()) : <any>undefined;
            this.note = _data["note"];
            this.depositAmount = _data["depositAmount"];
            if (Array.isArray(_data["bookingDetails"])) {
                this.bookingDetails = [] as any;
                for (let item of _data["bookingDetails"])
                    this.bookingDetails!.push(BookingDetailCreateDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BookingCreateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BookingCreateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : <any>undefined;
        data["note"] = this.note;
        data["depositAmount"] = this.depositAmount;
        if (Array.isArray(this.bookingDetails)) {
            data["bookingDetails"] = [];
            for (let item of this.bookingDetails)
                data["bookingDetails"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBookingCreateDTO {
    bookingDate?: Date;
    note?: string | undefined;
    depositAmount?: number;
    bookingDetails?: BookingDetailCreateDTO[] | undefined;
}

export class BookingDetailCreateDTO implements IBookingDetailCreateDTO {
    courtId?: string;
    startTime?: string;
    endTime?: string;

    constructor(data?: IBookingDetailCreateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courtId = _data["courtId"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
        }
    }

    static fromJS(data: any): BookingDetailCreateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new BookingDetailCreateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courtId"] = this.courtId;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        return data;
    }
}

export interface IBookingDetailCreateDTO {
    courtId?: string;
    startTime?: string;
    endTime?: string;
}

export class BookingDetailDto implements IBookingDetailDto {
    id?: string;
    courtId?: string;
    courtName?: string | undefined;
    sportsCenterName?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    totalPrice?: number;

    constructor(data?: IBookingDetailDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.courtId = _data["courtId"];
            this.courtName = _data["courtName"];
            this.sportsCenterName = _data["sportsCenterName"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.totalPrice = _data["totalPrice"];
        }
    }

    static fromJS(data: any): BookingDetailDto {
        data = typeof data === 'object' ? data : {};
        let result = new BookingDetailDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["courtId"] = this.courtId;
        data["courtName"] = this.courtName;
        data["sportsCenterName"] = this.sportsCenterName;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["totalPrice"] = this.totalPrice;
        return data;
    }
}

export interface IBookingDetailDto {
    id?: string;
    courtId?: string;
    courtName?: string | undefined;
    sportsCenterName?: string | undefined;
    startTime?: string | undefined;
    endTime?: string | undefined;
    totalPrice?: number;
}

export class BookingDto implements IBookingDto {
    id?: string;
    userId?: string;
    totalTime?: number;
    totalPrice?: number;
    remainingBalance?: number;
    initialDeposit?: number;
    status?: string | undefined;
    bookingDate?: Date;
    note?: string | undefined;
    createdAt?: Date;
    lastModified?: Date | undefined;
    bookingDetails?: BookingDetailDto[] | undefined;

    constructor(data?: IBookingDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.userId = _data["userId"];
            this.totalTime = _data["totalTime"];
            this.totalPrice = _data["totalPrice"];
            this.remainingBalance = _data["remainingBalance"];
            this.initialDeposit = _data["initialDeposit"];
            this.status = _data["status"];
            this.bookingDate = _data["bookingDate"] ? new Date(_data["bookingDate"].toString()) : <any>undefined;
            this.note = _data["note"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
            if (Array.isArray(_data["bookingDetails"])) {
                this.bookingDetails = [] as any;
                for (let item of _data["bookingDetails"])
                    this.bookingDetails!.push(BookingDetailDto.fromJS(item));
            }
        }
    }

    static fromJS(data: any): BookingDto {
        data = typeof data === 'object' ? data : {};
        let result = new BookingDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["userId"] = this.userId;
        data["totalTime"] = this.totalTime;
        data["totalPrice"] = this.totalPrice;
        data["remainingBalance"] = this.remainingBalance;
        data["initialDeposit"] = this.initialDeposit;
        data["status"] = this.status;
        data["bookingDate"] = this.bookingDate ? this.bookingDate.toISOString() : <any>undefined;
        data["note"] = this.note;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        if (Array.isArray(this.bookingDetails)) {
            data["bookingDetails"] = [];
            for (let item of this.bookingDetails)
                data["bookingDetails"].push(item.toJSON());
        }
        return data;
    }
}

export interface IBookingDto {
    id?: string;
    userId?: string;
    totalTime?: number;
    totalPrice?: number;
    remainingBalance?: number;
    initialDeposit?: number;
    status?: string | undefined;
    bookingDate?: Date;
    note?: string | undefined;
    createdAt?: Date;
    lastModified?: Date | undefined;
    bookingDetails?: BookingDetailDto[] | undefined;
}

export enum BookingStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
}
export class CourtPriceDetail implements ICourtPriceDetail {
    courtId?: string;
    courtName?: string | undefined;
    startTime?: string;
    endTime?: string;
    originalPrice?: number;
    discountedPrice?: number;
    promotionName?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number | undefined;

    constructor(data?: ICourtPriceDetail) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courtId = _data["courtId"];
            this.courtName = _data["courtName"];
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.originalPrice = _data["originalPrice"];
            this.discountedPrice = _data["discountedPrice"];
            this.promotionName = _data["promotionName"];
            this.discountType = _data["discountType"];
            this.discountValue = _data["discountValue"];
        }
    }

    static fromJS(data: any): CourtPriceDetail {
        data = typeof data === 'object' ? data : {};
        let result = new CourtPriceDetail();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courtId"] = this.courtId;
        data["courtName"] = this.courtName;
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["originalPrice"] = this.originalPrice;
        data["discountedPrice"] = this.discountedPrice;
        data["promotionName"] = this.promotionName;
        data["discountType"] = this.discountType;
        data["discountValue"] = this.discountValue;
        return data;
    }
}

export interface ICourtPriceDetail {
    courtId?: string;
    courtName?: string | undefined;
    startTime?: string;
    endTime?: string;
    originalPrice?: number;
    discountedPrice?: number;
    promotionName?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number | undefined;
}

export class CalculateBookingPriceRequest implements ICalculateBookingPriceRequest {
    booking?: BookingCreateDTO;

    constructor(data?: ICalculateBookingPriceRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.booking = _data["booking"] ? BookingCreateDTO.fromJS(_data["booking"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CalculateBookingPriceRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CalculateBookingPriceRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["booking"] = this.booking ? this.booking.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICalculateBookingPriceRequest {
    booking?: BookingCreateDTO;
}

export class CalculateBookingPriceResponse implements ICalculateBookingPriceResponse {
    courtPrices?: CourtPriceDetail[] | undefined;
    totalPrice?: number;
    minimumDeposit?: number;

    constructor(data?: ICalculateBookingPriceResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["courtPrices"])) {
                this.courtPrices = [] as any;
                for (let item of _data["courtPrices"])
                    this.courtPrices!.push(CourtPriceDetail.fromJS(item));
            }
            this.totalPrice = _data["totalPrice"];
            this.minimumDeposit = _data["minimumDeposit"];
        }
    }

    static fromJS(data: any): CalculateBookingPriceResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CalculateBookingPriceResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.courtPrices)) {
            data["courtPrices"] = [];
            for (let item of this.courtPrices)
                data["courtPrices"].push(item.toJSON());
        }
        data["totalPrice"] = this.totalPrice;
        data["minimumDeposit"] = this.minimumDeposit;
        return data;
    }
}

export interface ICalculateBookingPriceResponse {
    courtPrices?: CourtPriceDetail[] | undefined;
    totalPrice?: number;
    minimumDeposit?: number;
}

export class CancelBookingRequest implements ICancelBookingRequest {
    cancellationReason?: string | undefined;
    requestedAt?: Date;

    constructor(data?: ICancelBookingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.cancellationReason = _data["cancellationReason"];
            this.requestedAt = _data["requestedAt"] ? new Date(_data["requestedAt"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CancelBookingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CancelBookingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["cancellationReason"] = this.cancellationReason;
        data["requestedAt"] = this.requestedAt ? this.requestedAt.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICancelBookingRequest {
    cancellationReason?: string | undefined;
    requestedAt?: Date;
}

export class CancelBookingResult implements ICancelBookingResult {
    bookingId?: string;
    status?: string | undefined;
    refundAmount?: number;
    message?: string | undefined;

    constructor(data?: ICancelBookingResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bookingId = _data["bookingId"];
            this.status = _data["status"];
            this.refundAmount = _data["refundAmount"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): CancelBookingResult {
        data = typeof data === 'object' ? data : {};
        let result = new CancelBookingResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bookingId"] = this.bookingId;
        data["status"] = this.status;
        data["refundAmount"] = this.refundAmount;
        data["message"] = this.message;
        return data;
    }
}

export interface ICancelBookingResult {
    bookingId?: string;
    status?: string | undefined;
    refundAmount?: number;
    message?: string | undefined;
}

export class CourtCreateDTO implements ICourtCreateDTO {
    courtName?: string | undefined;
    sportId?: string;
    sportCenterId?: string;
    description?: string | undefined;
    facilities?: FacilityDTO[] | undefined;
    slotDuration?: string;
    minDepositPercentage?: number;
    courtType?: number;
    courtSchedules?: CourtScheduleDTO[] | undefined;
    cancellationWindowHours?: number;
    refundPercentage?: number;

    constructor(data?: ICourtCreateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courtName = _data["courtName"];
            this.sportId = _data["sportId"];
            this.sportCenterId = _data["sportCenterId"];
            this.description = _data["description"];
            if (Array.isArray(_data["facilities"])) {
                this.facilities = [] as any;
                for (let item of _data["facilities"])
                    this.facilities!.push(FacilityDTO.fromJS(item));
            }
            this.slotDuration = _data["slotDuration"];
            this.minDepositPercentage = _data["minDepositPercentage"];
            this.courtType = _data["courtType"];
            if (Array.isArray(_data["courtSchedules"])) {
                this.courtSchedules = [] as any;
                for (let item of _data["courtSchedules"])
                    this.courtSchedules!.push(CourtScheduleDTO.fromJS(item));
            }
            this.cancellationWindowHours = _data["cancellationWindowHours"];
            this.refundPercentage = _data["refundPercentage"];
        }
    }

    static fromJS(data: any): CourtCreateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CourtCreateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courtName"] = this.courtName;
        data["sportId"] = this.sportId;
        data["sportCenterId"] = this.sportCenterId;
        data["description"] = this.description;
        if (Array.isArray(this.facilities)) {
            data["facilities"] = [];
            for (let item of this.facilities)
                data["facilities"].push(item.toJSON());
        }
        data["slotDuration"] = this.slotDuration;
        data["minDepositPercentage"] = this.minDepositPercentage;
        data["courtType"] = this.courtType;
        if (Array.isArray(this.courtSchedules)) {
            data["courtSchedules"] = [];
            for (let item of this.courtSchedules)
                data["courtSchedules"].push(item.toJSON());
        }
        data["cancellationWindowHours"] = this.cancellationWindowHours;
        data["refundPercentage"] = this.refundPercentage;
        return data;
    }
}

export interface ICourtCreateDTO {
    courtName?: string | undefined;
    sportId?: string;
    sportCenterId?: string;
    description?: string | undefined;
    facilities?: FacilityDTO[] | undefined;
    slotDuration?: string;
    minDepositPercentage?: number;
    courtType?: number;
    courtSchedules?: CourtScheduleDTO[] | undefined;
    cancellationWindowHours?: number;
    refundPercentage?: number;
}

export class CourtDTO implements ICourtDTO {
    id?: string;
    courtName?: string | undefined;
    sportId?: string;
    sportCenterId?: string;
    description?: string | undefined;
    facilities?: FacilityDTO[] | undefined;
    slotDuration?: string;
    status?: CourtStatus;
    courtType?: CourtType;
    minDepositPercentage?: number;
    cancellationWindowHours?: number;
    refundPercentage?: number;
    sportName?: string | undefined;
    sportCenterName?: string | undefined;
    promotions?: CourtPromotionDTO[] | undefined;
    createdAt?: Date;
    lastModified?: Date | undefined;

    constructor(data?: ICourtDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.courtName = _data["courtName"];
            this.sportId = _data["sportId"];
            this.sportCenterId = _data["sportCenterId"];
            this.description = _data["description"];
            if (Array.isArray(_data["facilities"])) {
                this.facilities = [] as any;
                for (let item of _data["facilities"])
                    this.facilities!.push(FacilityDTO.fromJS(item));
            }
            this.slotDuration = _data["slotDuration"];
            this.status = _data["status"];
            this.courtType = _data["courtType"];
            this.minDepositPercentage = _data["minDepositPercentage"];
            this.cancellationWindowHours = _data["cancellationWindowHours"];
            this.refundPercentage = _data["refundPercentage"];
            this.sportName = _data["sportName"];
            this.sportCenterName = _data["sportCenterName"];
            if (Array.isArray(_data["promotions"])) {
                this.promotions = [] as any;
                for (let item of _data["promotions"])
                    this.promotions!.push(CourtPromotionDTO.fromJS(item));
            }
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CourtDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CourtDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["courtName"] = this.courtName;
        data["sportId"] = this.sportId;
        data["sportCenterId"] = this.sportCenterId;
        data["description"] = this.description;
        if (Array.isArray(this.facilities)) {
            data["facilities"] = [];
            for (let item of this.facilities)
                data["facilities"].push(item.toJSON());
        }
        data["slotDuration"] = this.slotDuration;
        data["status"] = this.status;
        data["courtType"] = this.courtType;
        data["minDepositPercentage"] = this.minDepositPercentage;
        data["cancellationWindowHours"] = this.cancellationWindowHours;
        data["refundPercentage"] = this.refundPercentage;
        data["sportName"] = this.sportName;
        data["sportCenterName"] = this.sportCenterName;
        if (Array.isArray(this.promotions)) {
            data["promotions"] = [];
            for (let item of this.promotions)
                data["promotions"].push(item.toJSON());
        }
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICourtDTO {
    id?: string;
    courtName?: string | undefined;
    sportId?: string;
    sportCenterId?: string;
    description?: string | undefined;
    facilities?: FacilityDTO[] | undefined;
    slotDuration?: string;
    status?: CourtStatus;
    courtType?: CourtType;
    minDepositPercentage?: number;
    cancellationWindowHours?: number;
    refundPercentage?: number;
    sportName?: string | undefined;
    sportCenterName?: string | undefined;
    promotions?: CourtPromotionDTO[] | undefined;
    createdAt?: Date;
    lastModified?: Date | undefined;
}

export class CourtDTOPaginatedResult implements ICourtDTOPaginatedResult {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: CourtDTO[] | undefined;

    constructor(data?: ICourtDTOPaginatedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.count = _data["count"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CourtDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CourtDTOPaginatedResult {
        data = typeof data === 'object' ? data : {};
        let result = new CourtDTOPaginatedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["count"] = this.count;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface ICourtDTOPaginatedResult {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: CourtDTO[] | undefined;
}

export class CourtPromotionDTO implements ICourtPromotionDTO {
    id?: string;
    courtId?: string;
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;
    createdAt?: Date;
    lastModified?: Date | undefined;

    constructor(data?: ICourtPromotionDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.courtId = _data["courtId"];
            this.description = _data["description"];
            this.discountType = _data["discountType"];
            this.discountValue = _data["discountValue"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CourtPromotionDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CourtPromotionDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["courtId"] = this.courtId;
        data["description"] = this.description;
        data["discountType"] = this.discountType;
        data["discountValue"] = this.discountValue;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>undefined;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICourtPromotionDTO {
    id?: string;
    courtId?: string;
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;
    createdAt?: Date;
    lastModified?: Date | undefined;
}

export class CourtScheduleDTO implements ICourtScheduleDTO {
    id?: string;
    courtId?: string;
    dayOfWeek?: number[] | undefined;
    startTime?: string;
    endTime?: string;
    priceSlot?: number;
    status?: number;
    createdAt?: Date;
    lastModified?: Date | undefined;

    constructor(data?: ICourtScheduleDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.courtId = _data["courtId"];
            if (Array.isArray(_data["dayOfWeek"])) {
                this.dayOfWeek = [] as any;
                for (let item of _data["dayOfWeek"])
                    this.dayOfWeek!.push(item);
            }
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.priceSlot = _data["priceSlot"];
            this.status = _data["status"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CourtScheduleDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CourtScheduleDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["courtId"] = this.courtId;
        if (Array.isArray(this.dayOfWeek)) {
            data["dayOfWeek"] = [];
            for (let item of this.dayOfWeek)
                data["dayOfWeek"].push(item);
        }
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["priceSlot"] = this.priceSlot;
        data["status"] = this.status;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICourtScheduleDTO {
    id?: string;
    courtId?: string;
    dayOfWeek?: number[] | undefined;
    startTime?: string;
    endTime?: string;
    priceSlot?: number;
    status?: number;
    createdAt?: Date;
    lastModified?: Date | undefined;
}

export class CourtScheduleUpdateDTO implements ICourtScheduleUpdateDTO {
    id?: string;
    dayOfWeek?: number[] | undefined;
    startTime?: string;
    endTime?: string;
    priceSlot?: number;
    status?: number;

    constructor(data?: ICourtScheduleUpdateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            if (Array.isArray(_data["dayOfWeek"])) {
                this.dayOfWeek = [] as any;
                for (let item of _data["dayOfWeek"])
                    this.dayOfWeek!.push(item);
            }
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.priceSlot = _data["priceSlot"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): CourtScheduleUpdateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CourtScheduleUpdateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (Array.isArray(this.dayOfWeek)) {
            data["dayOfWeek"] = [];
            for (let item of this.dayOfWeek)
                data["dayOfWeek"].push(item);
        }
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["priceSlot"] = this.priceSlot;
        data["status"] = this.status;
        return data;
    }
}

export interface ICourtScheduleUpdateDTO {
    id?: string;
    dayOfWeek?: number[] | undefined;
    startTime?: string;
    endTime?: string;
    priceSlot?: number;
    status?: number;
}

export enum CourtStatus {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum CourtType {
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class CourtUpdateDTO implements ICourtUpdateDTO {
    courtName?: string | undefined;
    sportId?: string;
    description?: string | undefined;
    facilities?: FacilityDTO[] | undefined;
    slotDuration?: string;
    status?: number;
    courtType?: number;
    minDepositPercentage?: number;
    cancellationWindowHours?: number;
    refundPercentage?: number;

    constructor(data?: ICourtUpdateDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courtName = _data["courtName"];
            this.sportId = _data["sportId"];
            this.description = _data["description"];
            if (Array.isArray(_data["facilities"])) {
                this.facilities = [] as any;
                for (let item of _data["facilities"])
                    this.facilities!.push(FacilityDTO.fromJS(item));
            }
            this.slotDuration = _data["slotDuration"];
            this.status = _data["status"];
            this.courtType = _data["courtType"];
            this.minDepositPercentage = _data["minDepositPercentage"];
            this.cancellationWindowHours = _data["cancellationWindowHours"];
            this.refundPercentage = _data["refundPercentage"];
        }
    }

    static fromJS(data: any): CourtUpdateDTO {
        data = typeof data === 'object' ? data : {};
        let result = new CourtUpdateDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courtName"] = this.courtName;
        data["sportId"] = this.sportId;
        data["description"] = this.description;
        if (Array.isArray(this.facilities)) {
            data["facilities"] = [];
            for (let item of this.facilities)
                data["facilities"].push(item.toJSON());
        }
        data["slotDuration"] = this.slotDuration;
        data["status"] = this.status;
        data["courtType"] = this.courtType;
        data["minDepositPercentage"] = this.minDepositPercentage;
        data["cancellationWindowHours"] = this.cancellationWindowHours;
        data["refundPercentage"] = this.refundPercentage;
        return data;
    }
}

export interface ICourtUpdateDTO {
    courtName?: string | undefined;
    sportId?: string;
    description?: string | undefined;
    facilities?: FacilityDTO[] | undefined;
    slotDuration?: string;
    status?: number;
    courtType?: number;
    minDepositPercentage?: number;
    cancellationWindowHours?: number;
    refundPercentage?: number;
}

export class CreateBookingRequest implements ICreateBookingRequest {
    booking?: BookingCreateDTO;

    constructor(data?: ICreateBookingRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.booking = _data["booking"] ? BookingCreateDTO.fromJS(_data["booking"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateBookingRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBookingRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["booking"] = this.booking ? this.booking.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateBookingRequest {
    booking?: BookingCreateDTO;
}

export class CreateBookingResponse implements ICreateBookingResponse {
    id?: string;
    status?: string | undefined;

    constructor(data?: ICreateBookingResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): CreateBookingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateBookingResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["status"] = this.status;
        return data;
    }
}

export interface ICreateBookingResponse {
    id?: string;
    status?: string | undefined;
}

export class CreateCourtPromotionRequest implements ICreateCourtPromotionRequest {
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;

    constructor(data?: ICreateCourtPromotionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.discountType = _data["discountType"];
            this.discountValue = _data["discountValue"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCourtPromotionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCourtPromotionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["discountType"] = this.discountType;
        data["discountValue"] = this.discountValue;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>undefined;
        return data;
    }
}

export interface ICreateCourtPromotionRequest {
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;
}
export class CreateSportCenterFormModel implements ICreateSportCenterFormModel {
    name?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    commune?: string | undefined;
    latitude?: number;
    longitude?: number;
    description?: string | undefined;
    avatarImage?: File | undefined; // Changed from string to File
    galleryImages?: File[] | undefined; // Changed from string[] to File[]

    constructor(data?: ICreateSportCenterFormModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.addressLine = _data["addressLine"];
            this.city = _data["city"];
            this.district = _data["district"];
            this.commune = _data["commune"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.description = _data["description"];
            this.avatarImage = _data["avatarImage"];
            if (Array.isArray(_data["galleryImages"])) {
                this.galleryImages = [] as any;
                for (let item of _data["galleryImages"])
                    this.galleryImages!.push(item);
            }
        }
    }

    static fromJS(data: any): CreateSportCenterFormModel {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSportCenterFormModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["addressLine"] = this.addressLine;
        data["city"] = this.city;
        data["district"] = this.district;
        data["commune"] = this.commune;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["description"] = this.description;
        data["avatarImage"] = this.avatarImage;
        if (Array.isArray(this.galleryImages)) {
            data["galleryImages"] = [];
            for (let item of this.galleryImages)
                data["galleryImages"].push(item);
        }
        return data;
    }
}

export interface ICreateSportCenterFormModel {
    name?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    commune?: string | undefined;
    latitude?: number;
    longitude?: number;
    description?: string | undefined;
    avatarImage?: File | undefined; // Changed from string to File
    galleryImages?: File[] | undefined; // Changed from string[] to File[]
}

export class CreateCourtRequest implements ICreateCourtRequest {
    court?: CourtCreateDTO;

    constructor(data?: ICreateCourtRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.court = _data["court"] ? CourtCreateDTO.fromJS(_data["court"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CreateCourtRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCourtRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["court"] = this.court ? this.court.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICreateCourtRequest {
    court?: CourtCreateDTO;
}

export class CreateCourtResponse implements ICreateCourtResponse {
    id?: string;

    constructor(data?: ICreateCourtResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateCourtResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCourtResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateCourtResponse {
    id?: string;
}

export class CreateCourtScheduleCommand implements ICreateCourtScheduleCommand {
    courtId?: string;
    dayOfWeek?: number[] | undefined;
    startTime?: string;
    endTime?: string;
    priceSlot?: number;

    constructor(data?: ICreateCourtScheduleCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courtId = _data["courtId"];
            if (Array.isArray(_data["dayOfWeek"])) {
                this.dayOfWeek = [] as any;
                for (let item of _data["dayOfWeek"])
                    this.dayOfWeek!.push(item);
            }
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.priceSlot = _data["priceSlot"];
        }
    }

    static fromJS(data: any): CreateCourtScheduleCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCourtScheduleCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courtId"] = this.courtId;
        if (Array.isArray(this.dayOfWeek)) {
            data["dayOfWeek"] = [];
            for (let item of this.dayOfWeek)
                data["dayOfWeek"].push(item);
        }
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["priceSlot"] = this.priceSlot;
        return data;
    }
}

export interface ICreateCourtScheduleCommand {
    courtId?: string;
    dayOfWeek?: number[] | undefined;
    startTime?: string;
    endTime?: string;
    priceSlot?: number;
}

export class CreateCourtScheduleResponse implements ICreateCourtScheduleResponse {
    id?: string;

    constructor(data?: ICreateCourtScheduleResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateCourtScheduleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateCourtScheduleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateCourtScheduleResponse {
    id?: string;
}


export class CreateSportCenterResponse implements ICreateSportCenterResponse {
    id?: string;

    constructor(data?: ICreateSportCenterResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateSportCenterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSportCenterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateSportCenterResponse {
    id?: string;
}

export class CreateSportRequest implements ICreateSportRequest {
    name?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;

    constructor(data?: ICreateSportRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
            this.icon = _data["icon"];
        }
    }

    static fromJS(data: any): CreateSportRequest {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSportRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        data["icon"] = this.icon;
        return data;
    }
}

export interface ICreateSportRequest {
    name?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;
}

export class UpdateBookingNoteRequest implements IUpdateBookingNoteRequest {
    note?: string | undefined;

    constructor(data?: IUpdateBookingNoteRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.note = _data["note"];
        }
    }

    static fromJS(data: any): UpdateBookingNoteRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBookingNoteRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["note"] = this.note;
        return data;
    }
}

export interface IUpdateBookingNoteRequest {
    note?: string | undefined;
}

export class UpdateBookingNoteResponse implements IUpdateBookingNoteResponse {
    isSuccess?: boolean;

    constructor(data?: IUpdateBookingNoteResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
        }
    }

    static fromJS(data: any): UpdateBookingNoteResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBookingNoteResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        return data;
    }
}

export interface IUpdateBookingNoteResponse {
    isSuccess?: boolean;
}

export class UpdateBookingStatusRequest implements IUpdateBookingStatusRequest {
    status?: string | undefined;

    constructor(data?: IUpdateBookingStatusRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): UpdateBookingStatusRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBookingStatusRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["status"] = this.status;
        return data;
    }
}

export interface IUpdateBookingStatusRequest {
    status?: string | undefined;
}

export class UpdateBookingStatusResponse implements IUpdateBookingStatusResponse {
    isSuccess?: boolean;

    constructor(data?: IUpdateBookingStatusResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
        }
    }

    static fromJS(data: any): UpdateBookingStatusResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateBookingStatusResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        return data;
    }
}

export interface IUpdateBookingStatusResponse {
    isSuccess?: boolean;
}


export class UpdateSportCenterFormModel implements IUpdateSportCenterFormModel {
    name?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    commune?: string | undefined;
    latitude?: number;
    longitude?: number;
    description?: string | undefined;
    avatarImage?: string | undefined;
    galleryImages?: string[] | undefined;
    existingAvatar?: string | undefined;
    existingGalleryUrls?: string[] | undefined;
    keepExistingAvatar?: boolean;
    keepExistingGallery?: boolean;

    constructor(data?: IUpdateSportCenterFormModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.addressLine = _data["addressLine"];
            this.city = _data["city"];
            this.district = _data["district"];
            this.commune = _data["commune"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.description = _data["description"];
            this.avatarImage = _data["avatarImage"];
            if (Array.isArray(_data["galleryImages"])) {
                this.galleryImages = [] as any;
                for (let item of _data["galleryImages"])
                    this.galleryImages!.push(item);
            }
            this.existingAvatar = _data["existingAvatar"];
            if (Array.isArray(_data["existingGalleryUrls"])) {
                this.existingGalleryUrls = [] as any;
                for (let item of _data["existingGalleryUrls"])
                    this.existingGalleryUrls!.push(item);
            }
            this.keepExistingAvatar = _data["keepExistingAvatar"];
            this.keepExistingGallery = _data["keepExistingGallery"];
        }
    }

    static fromJS(data: any): UpdateSportCenterFormModel {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSportCenterFormModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["addressLine"] = this.addressLine;
        data["city"] = this.city;
        data["district"] = this.district;
        data["commune"] = this.commune;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["description"] = this.description;
        data["avatarImage"] = this.avatarImage;
        if (Array.isArray(this.galleryImages)) {
            data["galleryImages"] = [];
            for (let item of this.galleryImages)
                data["galleryImages"].push(item);
        }
        data["existingAvatar"] = this.existingAvatar;
        if (Array.isArray(this.existingGalleryUrls)) {
            data["existingGalleryUrls"] = [];
            for (let item of this.existingGalleryUrls)
                data["existingGalleryUrls"].push(item);
        }
        data["keepExistingAvatar"] = this.keepExistingAvatar;
        data["keepExistingGallery"] = this.keepExistingGallery;
        return data;
    }
}

export interface IUpdateSportCenterFormModel {
    name?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    commune?: string | undefined;
    latitude?: number;
    longitude?: number;
    description?: string | undefined;
    avatarImage?: string | undefined;
    galleryImages?: string[] | undefined;
    existingAvatar?: string | undefined;
    existingGalleryUrls?: string[] | undefined;
    keepExistingAvatar?: boolean;
    keepExistingGallery?: boolean;
}

export class CreateSportResponse implements ICreateSportResponse {
    id?: string;

    constructor(data?: ICreateSportResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
        }
    }

    static fromJS(data: any): CreateSportResponse {
        data = typeof data === 'object' ? data : {};
        let result = new CreateSportResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        return data;
    }
}

export interface ICreateSportResponse {
    id?: string;
}

export class DailySchedule implements IDailySchedule {
    date?: Date;
    dayOfWeek?: number;
    timeSlots?: TimeSlot[] | undefined;

    constructor(data?: IDailySchedule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.dayOfWeek = _data["dayOfWeek"];
            if (Array.isArray(_data["timeSlots"])) {
                this.timeSlots = [] as any;
                for (let item of _data["timeSlots"])
                    this.timeSlots!.push(TimeSlot.fromJS(item));
            }
        }
    }

    static fromJS(data: any): DailySchedule {
        data = typeof data === 'object' ? data : {};
        let result = new DailySchedule();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["dayOfWeek"] = this.dayOfWeek;
        if (Array.isArray(this.timeSlots)) {
            data["timeSlots"] = [];
            for (let item of this.timeSlots)
                data["timeSlots"].push(item.toJSON());
        }
        return data;
    }
}

export interface IDailySchedule {
    date?: Date;
    dayOfWeek?: number;
    timeSlots?: TimeSlot[] | undefined;
}

export class DeleteCourtResponse implements IDeleteCourtResponse {
    isSuccess?: boolean;

    constructor(data?: IDeleteCourtResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
        }
    }

    static fromJS(data: any): DeleteCourtResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCourtResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        return data;
    }
}

export interface IDeleteCourtResponse {
    isSuccess?: boolean;
}

export class GetCourtsByOwnerResponse implements IGetCourtsByOwnerResponse {
    courts?: CourtDTOPaginatedResult;

    constructor(data?: IGetCourtsByOwnerResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courts = _data["courts"] ? CourtDTOPaginatedResult.fromJS(_data["courts"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCourtsByOwnerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCourtsByOwnerResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courts"] = this.courts ? this.courts.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCourtsByOwnerResponse {
    courts?: CourtDTOPaginatedResult;
}




export class DeleteCourtScheduleResponse implements IDeleteCourtScheduleResponse {
    isSuccess?: boolean;

    constructor(data?: IDeleteCourtScheduleResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
        }
    }

    static fromJS(data: any): DeleteCourtScheduleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteCourtScheduleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        return data;
    }
}

export interface IDeleteCourtScheduleResponse {
    isSuccess?: boolean;
}

export class DeleteSportResponse implements IDeleteSportResponse {
    isSuccess?: boolean;
    message?: string | undefined;

    constructor(data?: IDeleteSportResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
            this.message = _data["message"];
        }
    }

    static fromJS(data: any): DeleteSportResponse {
        data = typeof data === 'object' ? data : {};
        let result = new DeleteSportResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        data["message"] = this.message;
        return data;
    }
}

export interface IDeleteSportResponse {
    isSuccess?: boolean;
    message?: string | undefined;
}

export class FacilityDTO implements IFacilityDTO {
    name?: string | undefined;
    description?: string | undefined;

    constructor(data?: IFacilityDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.description = _data["description"];
        }
    }

    static fromJS(data: any): FacilityDTO {
        data = typeof data === 'object' ? data : {};
        let result = new FacilityDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["description"] = this.description;
        return data;
    }
}

export interface IFacilityDTO {
    name?: string | undefined;
    description?: string | undefined;
}

export class GetAllCourtsOfSportCenterResponse implements IGetAllCourtsOfSportCenterResponse {
    courts?: CourtDTO[] | undefined;

    constructor(data?: IGetAllCourtsOfSportCenterResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["courts"])) {
                this.courts = [] as any;
                for (let item of _data["courts"])
                    this.courts!.push(CourtDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetAllCourtsOfSportCenterResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllCourtsOfSportCenterResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.courts)) {
            data["courts"] = [];
            for (let item of this.courts)
                data["courts"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetAllCourtsOfSportCenterResponse {
    courts?: CourtDTO[] | undefined;
}

export class GetBookingsResult implements IGetBookingsResult {
    bookings?: BookingDto[] | undefined;
    totalCount?: number;

    constructor(data?: IGetBookingsResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["bookings"])) {
                this.bookings = [] as any;
                for (let item of _data["bookings"])
                    this.bookings!.push(BookingDto.fromJS(item));
            }
            this.totalCount = _data["totalCount"];
        }
    }

    static fromJS(data: any): GetBookingsResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetBookingsResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.bookings)) {
            data["bookings"] = [];
            for (let item of this.bookings)
                data["bookings"].push(item.toJSON());
        }
        data["totalCount"] = this.totalCount;
        return data;
    }
}

export interface IGetBookingsResult {
    bookings?: BookingDto[] | undefined;
    totalCount?: number;
}

export class GetCourtAvailabilityResult implements IGetCourtAvailabilityResult {
    courtId?: string;
    slotDuration?: number;
    schedule?: DailySchedule[] | undefined;

    constructor(data?: IGetCourtAvailabilityResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courtId = _data["courtId"];
            this.slotDuration = _data["slotDuration"];
            if (Array.isArray(_data["schedule"])) {
                this.schedule = [] as any;
                for (let item of _data["schedule"])
                    this.schedule!.push(DailySchedule.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetCourtAvailabilityResult {
        data = typeof data === 'object' ? data : {};
        let result = new GetCourtAvailabilityResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courtId"] = this.courtId;
        data["slotDuration"] = this.slotDuration;
        if (Array.isArray(this.schedule)) {
            data["schedule"] = [];
            for (let item of this.schedule)
                data["schedule"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetCourtAvailabilityResult {
    courtId?: string;
    slotDuration?: number;
    schedule?: DailySchedule[] | undefined;
}

export class GetCourtDetailsResponse implements IGetCourtDetailsResponse {
    court?: CourtDTO;

    constructor(data?: IGetCourtDetailsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.court = _data["court"] ? CourtDTO.fromJS(_data["court"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCourtDetailsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCourtDetailsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["court"] = this.court ? this.court.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCourtDetailsResponse {
    court?: CourtDTO;
}
export class GetOwnedSportCentersResponse implements IGetOwnedSportCentersResponse {
    sportCenters?: SportCenterListDTOPaginatedResult;

    constructor(data?: IGetOwnedSportCentersResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sportCenters = _data["sportCenters"] ? SportCenterListDTOPaginatedResult.fromJS(_data["sportCenters"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetOwnedSportCentersResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetOwnedSportCentersResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sportCenters"] = this.sportCenters ? this.sportCenters.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetOwnedSportCentersResponse {
    sportCenters?: SportCenterListDTOPaginatedResult;
}


export class GetCourtStatsResponse implements IGetCourtStatsResponse {
    total_courts?: number;
    total_courts_revenue?: number;
    date_range?: any | undefined;

    constructor(data?: IGetCourtStatsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.total_courts = _data["total_courts"];
            this.total_courts_revenue = _data["total_courts_revenue"];
            this.date_range = _data["date_range"];
        }
    }

    static fromJS(data: any): GetCourtStatsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCourtStatsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["total_courts"] = this.total_courts;
        data["total_courts_revenue"] = this.total_courts_revenue;
        data["date_range"] = this.date_range;
        return data;
    }
}

export interface IGetCourtStatsResponse {
    total_courts?: number;
    total_courts_revenue?: number;
    date_range?: any | undefined;
}

export class GetCourtsResponse implements IGetCourtsResponse {
    courts?: CourtDTOPaginatedResult;

    constructor(data?: IGetCourtsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courts = _data["courts"] ? CourtDTOPaginatedResult.fromJS(_data["courts"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetCourtsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetCourtsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courts"] = this.courts ? this.courts.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetCourtsResponse {
    courts?: CourtDTOPaginatedResult;
}

export class GetSportCentersResponse implements IGetSportCentersResponse {
    sportCenters?: SportCenterListDTOPaginatedResult;

    constructor(data?: IGetSportCentersResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.sportCenters = _data["sportCenters"] ? SportCenterListDTOPaginatedResult.fromJS(_data["sportCenters"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GetSportCentersResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetSportCentersResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["sportCenters"] = this.sportCenters ? this.sportCenters.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGetSportCentersResponse {
    sportCenters?: SportCenterListDTOPaginatedResult;
}



export class GetSportsResponse implements IGetSportsResponse {
    sports?: SportDTO[] | undefined;

    constructor(data?: IGetSportsResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["sports"])) {
                this.sports = [] as any;
                for (let item of _data["sports"])
                    this.sports!.push(SportDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): GetSportsResponse {
        data = typeof data === 'object' ? data : {};
        let result = new GetSportsResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.sports)) {
            data["sports"] = [];
            for (let item of this.sports)
                data["sports"].push(item.toJSON());
        }
        return data;
    }
}

export interface IGetSportsResponse {
    sports?: SportDTO[] | undefined;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export class PromotionInfo implements IPromotionInfo {
    discountType?: string | undefined;
    discountValue?: number;

    constructor(data?: IPromotionInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.discountType = _data["discountType"];
            this.discountValue = _data["discountValue"];
        }
    }

    static fromJS(data: any): PromotionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PromotionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["discountType"] = this.discountType;
        data["discountValue"] = this.discountValue;
        return data;
    }
}

export interface IPromotionInfo {
    discountType?: string | undefined;
    discountValue?: number;
}

export class SportCenterListDTO implements ISportCenterListDTO {
    id?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    sportNames?: string[] | undefined;
    address?: string | undefined;
    description?: string | undefined;
    avatar?: string | undefined;
    imageUrl?: string[] | undefined;

    constructor(data?: ISportCenterListDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            if (Array.isArray(_data["sportNames"])) {
                this.sportNames = [] as any;
                for (let item of _data["sportNames"])
                    this.sportNames!.push(item);
            }
            this.address = _data["address"];
            this.description = _data["description"];
            this.avatar = _data["avatar"];
            if (Array.isArray(_data["imageUrl"])) {
                this.imageUrl = [] as any;
                for (let item of _data["imageUrl"])
                    this.imageUrl!.push(item);
            }
        }
    }

    static fromJS(data: any): SportCenterListDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SportCenterListDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        if (Array.isArray(this.sportNames)) {
            data["sportNames"] = [];
            for (let item of this.sportNames)
                data["sportNames"].push(item);
        }
        data["address"] = this.address;
        data["description"] = this.description;
        data["avatar"] = this.avatar;
        if (Array.isArray(this.imageUrl)) {
            data["imageUrl"] = [];
            for (let item of this.imageUrl)
                data["imageUrl"].push(item);
        }
        return data;
    }
}

export interface ISportCenterListDTO {
    id?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    sportNames?: string[] | undefined;
    address?: string | undefined;
    description?: string | undefined;
    avatar?: string | undefined;
    imageUrl?: string[] | undefined;
}

export class SportCenterListDTOPaginatedResult implements ISportCenterListDTOPaginatedResult {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: SportCenterListDTO[] | undefined;

    constructor(data?: ISportCenterListDTOPaginatedResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.pageIndex = _data["pageIndex"];
            this.pageSize = _data["pageSize"];
            this.count = _data["count"];
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(SportCenterListDTO.fromJS(item));
            }
        }
    }

    static fromJS(data: any): SportCenterListDTOPaginatedResult {
        data = typeof data === 'object' ? data : {};
        let result = new SportCenterListDTOPaginatedResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["pageIndex"] = this.pageIndex;
        data["pageSize"] = this.pageSize;
        data["count"] = this.count;
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item.toJSON());
        }
        return data;
    }
}

export interface ISportCenterListDTOPaginatedResult {
    pageIndex?: number;
    pageSize?: number;
    count?: number;
    data?: SportCenterListDTO[] | undefined;
}

export class SportDTO implements ISportDTO {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;

    constructor(data?: ISportDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.icon = _data["icon"];
        }
    }

    static fromJS(data: any): SportDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SportDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["icon"] = this.icon;
        return data;
    }
}

export interface ISportDTO {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;
}

export class TimeSlot implements ITimeSlot {
    startTime?: string | undefined;
    endTime?: string | undefined;
    price?: number;
    status?: string | undefined;
    promotion?: PromotionInfo;
    bookedBy?: string | undefined;

    constructor(data?: ITimeSlot) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.startTime = _data["startTime"];
            this.endTime = _data["endTime"];
            this.price = _data["price"];
            this.status = _data["status"];
            this.promotion = _data["promotion"] ? PromotionInfo.fromJS(_data["promotion"]) : <any>undefined;
            this.bookedBy = _data["bookedBy"];
        }
    }

    static fromJS(data: any): TimeSlot {
        data = typeof data === 'object' ? data : {};
        let result = new TimeSlot();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["startTime"] = this.startTime;
        data["endTime"] = this.endTime;
        data["price"] = this.price;
        data["status"] = this.status;
        data["promotion"] = this.promotion ? this.promotion.toJSON() : <any>undefined;
        data["bookedBy"] = this.bookedBy;
        return data;
    }
}

export interface ITimeSlot {
    startTime?: string | undefined;
    endTime?: string | undefined;
    price?: number;
    status?: string | undefined;
    promotion?: PromotionInfo;
    bookedBy?: string | undefined;
}

export class UpdateCourtPromotionRequest implements IUpdateCourtPromotionRequest {
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;

    constructor(data?: IUpdateCourtPromotionRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.description = _data["description"];
            this.discountType = _data["discountType"];
            this.discountValue = _data["discountValue"];
            this.validFrom = _data["validFrom"] ? new Date(_data["validFrom"].toString()) : <any>undefined;
            this.validTo = _data["validTo"] ? new Date(_data["validTo"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateCourtPromotionRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCourtPromotionRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["description"] = this.description;
        data["discountType"] = this.discountType;
        data["discountValue"] = this.discountValue;
        data["validFrom"] = this.validFrom ? this.validFrom.toISOString() : <any>undefined;
        data["validTo"] = this.validTo ? this.validTo.toISOString() : <any>undefined;
        return data;
    }
}

export interface IUpdateCourtPromotionRequest {
    description?: string | undefined;
    discountType?: string | undefined;
    discountValue?: number;
    validFrom?: Date;
    validTo?: Date;
}

export class UpdateCourtRequest implements IUpdateCourtRequest {
    court?: CourtUpdateDTO;

    constructor(data?: IUpdateCourtRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.court = _data["court"] ? CourtUpdateDTO.fromJS(_data["court"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateCourtRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCourtRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["court"] = this.court ? this.court.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateCourtRequest {
    court?: CourtUpdateDTO;
}

export class UpdateCourtResponse implements IUpdateCourtResponse {
    isSuccess?: boolean;

    constructor(data?: IUpdateCourtResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
        }
    }

    static fromJS(data: any): UpdateCourtResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCourtResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        return data;
    }
}

export interface IUpdateCourtResponse {
    isSuccess?: boolean;
}

export class UpdateCourtScheduleRequest implements IUpdateCourtScheduleRequest {
    courtSchedule?: CourtScheduleUpdateDTO;

    constructor(data?: IUpdateCourtScheduleRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.courtSchedule = _data["courtSchedule"] ? CourtScheduleUpdateDTO.fromJS(_data["courtSchedule"]) : <any>undefined;
        }
    }

    static fromJS(data: any): UpdateCourtScheduleRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCourtScheduleRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["courtSchedule"] = this.courtSchedule ? this.courtSchedule.toJSON() : <any>undefined;
        return data;
    }
}

export interface IUpdateCourtScheduleRequest {
    courtSchedule?: CourtScheduleUpdateDTO;
}

export class UpdateCourtScheduleResponse implements IUpdateCourtScheduleResponse {
    isSuccess?: boolean;

    constructor(data?: IUpdateCourtScheduleResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
        }
    }

    static fromJS(data: any): UpdateCourtScheduleResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateCourtScheduleResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        return data;
    }
}

export interface IUpdateCourtScheduleResponse {
    isSuccess?: boolean;
}

export class SportCenterDetailDTO implements ISportCenterDetailDTO {
    id?: string;
    ownerId?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    commune?: string | undefined;
    latitude?: number;
    longitude?: number;
    avatar?: string | undefined;
    imageUrls?: string[] | undefined;
    description?: string | undefined;
    createdAt?: Date;
    lastModified?: Date | undefined;

    constructor(data?: ISportCenterDetailDTO) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.ownerId = _data["ownerId"];
            this.name = _data["name"];
            this.phoneNumber = _data["phoneNumber"];
            this.addressLine = _data["addressLine"];
            this.city = _data["city"];
            this.district = _data["district"];
            this.commune = _data["commune"];
            this.latitude = _data["latitude"];
            this.longitude = _data["longitude"];
            this.avatar = _data["avatar"];
            if (Array.isArray(_data["imageUrls"])) {
                this.imageUrls = [] as any;
                for (let item of _data["imageUrls"])
                    this.imageUrls!.push(item);
            }
            this.description = _data["description"];
            this.createdAt = _data["createdAt"] ? new Date(_data["createdAt"].toString()) : <any>undefined;
            this.lastModified = _data["lastModified"] ? new Date(_data["lastModified"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): SportCenterDetailDTO {
        data = typeof data === 'object' ? data : {};
        let result = new SportCenterDetailDTO();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["ownerId"] = this.ownerId;
        data["name"] = this.name;
        data["phoneNumber"] = this.phoneNumber;
        data["addressLine"] = this.addressLine;
        data["city"] = this.city;
        data["district"] = this.district;
        data["commune"] = this.commune;
        data["latitude"] = this.latitude;
        data["longitude"] = this.longitude;
        data["avatar"] = this.avatar;
        if (Array.isArray(this.imageUrls)) {
            data["imageUrls"] = [];
            for (let item of this.imageUrls)
                data["imageUrls"].push(item);
        }
        data["description"] = this.description;
        data["createdAt"] = this.createdAt ? this.createdAt.toISOString() : <any>undefined;
        data["lastModified"] = this.lastModified ? this.lastModified.toISOString() : <any>undefined;
        return data;
    }
}

export interface ISportCenterDetailDTO {
    id?: string;
    ownerId?: string;
    name?: string | undefined;
    phoneNumber?: string | undefined;
    addressLine?: string | undefined;
    city?: string | undefined;
    district?: string | undefined;
    commune?: string | undefined;
    latitude?: number;
    longitude?: number;
    avatar?: string | undefined;
    imageUrls?: string[] | undefined;
    description?: string | undefined;
    createdAt?: Date;
    lastModified?: Date | undefined;
}

export class UpdateSportRequest implements IUpdateSportRequest {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;

    constructor(data?: IUpdateSportRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.description = _data["description"];
            this.icon = _data["icon"];
        }
    }

    static fromJS(data: any): UpdateSportRequest {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSportRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["description"] = this.description;
        data["icon"] = this.icon;
        return data;
    }
}

export interface IUpdateSportRequest {
    id?: string;
    name?: string | undefined;
    description?: string | undefined;
    icon?: string | undefined;
}

export class UpdateSportResponse implements IUpdateSportResponse {
    isSuccess?: boolean;

    constructor(data?: IUpdateSportResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.isSuccess = _data["isSuccess"];
        }
    }

    static fromJS(data: any): UpdateSportResponse {
        data = typeof data === 'object' ? data : {};
        let result = new UpdateSportResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isSuccess"] = this.isSuccess;
        return data;
    }
}

export interface IUpdateSportResponse {
    isSuccess?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}