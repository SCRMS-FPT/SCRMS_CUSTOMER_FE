// /src/components/Chat/ChatList.jsx
import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
// Import the Client class and instantiate it
import { Client } from "@/API/ChatApi";
import { Avatar, List, Badge } from "antd";
import { format } from "date-fns";
import ChatSkeleton from "@/components/Chat/ChatSkeleton";

const chatApiClient = new Client(); // Create an instance

const ChatList = () => {
  const navigate = useNavigate();
  const [chats, setChats] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchChats();
  }, []);

  const fetchChats = async () => {
    try {
      // NOTE: The autogenerated API returns Promise<void>
      // For now, simulate dummy data.
      // In your real implementation, update getChatSessions to return actual data.
      // const response = await chatApiClient.getChatSessions(1, 50);
      const response = [
        {
          chat_session_id: "1",
          name: "Chat with Nguyen Van B",
          updated_at: new Date().toISOString(),
          unread_count: 2,
          avatar: "/default-avatar.png",
        },
        {
          chat_session_id: "2",
          name: "Chat with Le Thi C",
          updated_at: new Date().toISOString(),
          unread_count: 0,
          avatar: "/default-avatar.png",
        },
      ];
      setChats(response);
    } catch (error) {
      console.error("Failed to load chat sessions:", error);
    } finally {
      setLoading(false);
    }
  };

  if (loading) return <ChatSkeleton />;

  return (
    <div className="p-4">
      <h2 className="text-lg font-semibold mb-3">Your Chats</h2>
      <List
        itemLayout="horizontal"
        dataSource={chats}
        renderItem={(chat) => (
          <List.Item
            className="cursor-pointer hover:bg-gray-100 p-2 rounded-lg"
            onClick={() => navigate(`/chats/${chat.chat_session_id}`)}
          >
            <List.Item.Meta
              avatar={<Avatar src={chat.avatar} />}
              title={chat.name || "Unnamed Chat"}
              description={`Last message: ${format(new Date(chat.updated_at), "PPpp")}`}
            />
            {chat.unread_count > 0 && <Badge count={chat.unread_count} />}
          </List.Item>
        )}
      />
    </div>
  );
};

export default ChatList;
